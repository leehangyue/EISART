"""
EISART GUI
Coded by Hangyue Li, Tsinghua University
"""

#  /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 08, 2020 04:24:07 PM CST  platform: Windows NT

print('\n   ---   Welcome to EISART!   ---   \n')

print('\nImporting modules...\n')

import sys
print('sys imported.')

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
print('Tkinter imported.')

print('Importing EISART_support...')
from os.path import dirname
cd = dirname(__file__)
from sys import path
path.append(cd)
import EISART_support
path.pop()
print('EISART_support imported.')
print('\nDone importing.\n')
print('Launch GUI...\n')

def vp_start_gui():
    "Starting point when module is the main routine."
    global val, w, root, dnd
    root = tk.Tk()
    EISART_support.set_Tk_var()
    top = Toplevel1 (root)
    EISART_support.init(root, top)
    top.che_auto_lmd_cmd()
    top.che_eis_fit_cmd()
    top.radio_drt_ecm_sel()
    top.che_auto_peak_detect_cmd()
    print("GUI started.")
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    # Starting point when module is imported by another module.
    # Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .
    global w, w_win, root, dnd
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    EISART_support.set_Tk_var()
    top = Toplevel1 (w)
    EISART_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        # This class configures and populates the toplevel window. top is the toplevel containing window.
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _slcolor = '#5f87c5'  # color for selected
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Consolas} -size 9"
        font9 = "-family {Segoe UI} -size 12 -weight bold"
        self.tooltip_font = "TkDefaultFont"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        windowWidth = 1350
        windowHeight = 700
        positionRight = int(root.winfo_screenwidth() / 2 - windowWidth / 2)
        positionDown = int(root.winfo_screenheight() / 2 - windowHeight / 2)
        top.geometry(
            "{}x{}+{}+{}".format(windowWidth, windowHeight, positionRight, positionDown))  # center the dialog
        # top.geometry("1350x700+5+5")
        top.minsize(1000, 600)
        top.maxsize(12000, 8000)
        top.resizable(1, 1)
        top.title("EISART v2.5 by Hangyue Li")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TSizegrip', background=_bgcolor)
        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="horizontal")
        self.TPanedwindow1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)

        self.TPanedwindow1_p1 = ttk.Labelframe(width=75, text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.Frame_ctrl = tk.Frame(self.TPanedwindow1_p1)
        self.Frame_ctrl.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0
                , bordermode='ignore')
        self.Frame_ctrl.configure(relief='ridge')
        self.Frame_ctrl.configure(borderwidth="2")
        self.Frame_ctrl.configure(relief="ridge")
        self.Frame_ctrl.configure(background="#d9d9d9")
        self.Frame_ctrl.configure(highlightbackground="#4d5564")
        self.Frame_ctrl.configure(highlightcolor="black")

        self.Button_SaveData = tk.Button(self.Frame_ctrl)
        self.Button_SaveData.place(relx=0.0, rely=0.9, height=58, relwidth=0.5)
        self.Button_SaveData.configure(activebackground="#ececec")
        self.Button_SaveData.configure(activeforeground="#000000")
        self.Button_SaveData.configure(background="#d9d9d9")
        self.Button_SaveData.configure(command=EISART_support.command_for_Button_SaveData)
        self.Button_SaveData.configure(disabledforeground="#a3a3a3")
        self.Button_SaveData.configure(foreground="#000000")
        self.Button_SaveData.configure(highlightbackground="#4d5564")
        self.Button_SaveData.configure(highlightcolor="black")
        self.Button_SaveData.configure(pady="0")
        self.Button_SaveData.configure(text="Save Data")
        self.Button_save_data_tooltip = \
            ToolTip(self.Button_SaveData, self.tooltip_font, "Save quantitative results as files")

        self.Button_RefreshPlot = tk.Button(self.Frame_ctrl)
        self.Button_RefreshPlot.place(relx=0.501, rely=0.9, height=58, relwidth=0.499)

        self.Button_RefreshPlot.configure(activebackground="#ececec")
        self.Button_RefreshPlot.configure(activeforeground="#000000")
        self.Button_RefreshPlot.configure(background="#d9d9d9")
        self.Button_RefreshPlot.configure(command=EISART_support.command_for_Button_RefreshPlot)
        self.Button_RefreshPlot.configure(disabledforeground="#a3a3a3")
        self.Button_RefreshPlot.configure(foreground="#000000")
        self.Button_RefreshPlot.configure(highlightbackground="#d9d9d9")
        self.Button_RefreshPlot.configure(highlightcolor="black")
        self.Button_RefreshPlot.configure(pady="0")
        self.Button_RefreshPlot.configure(text="Refresh Plot")
        self.Button_refresh_plot_tooltip = \
            ToolTip(self.Button_RefreshPlot, self.tooltip_font, "Re-draw the plots using current settings")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook_Browse_settings = ttk.Notebook(self.Frame_ctrl)
        self.TNotebook_Browse_settings.place(relx=0.0, rely=0.15, relheight=0.75
                , relwidth=1.0)
        self.TNotebook_Browse_settings.configure(takefocus="")
        self.TNotebook_Browse_settings_t1 = tk.Frame(self.TNotebook_Browse_settings)
        self.TNotebook_Browse_settings.add(self.TNotebook_Browse_settings_t1, padding=3)
        self.TNotebook_Browse_settings.tab(0, text="   File Browser   "
                ,compound="left", underline="-1", )
        self.TNotebook_Browse_settings_t1.configure(background="#d9d9d9")
        self.TNotebook_Browse_settings_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook_Browse_settings_t1.configure(highlightcolor="black")
        self.TNotebook_Browse_settings_t2 = tk.Frame(self.TNotebook_Browse_settings)
        self.TNotebook_Browse_settings.add(self.TNotebook_Browse_settings_t2, padding=3)
        self.TNotebook_Browse_settings.tab(1, text="   Settings   "
                ,compound="left", underline="-1", )
        self.TNotebook_Browse_settings_t2.configure(background="#d9d9d9")
        self.TNotebook_Browse_settings_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook_Browse_settings_t2.configure(highlightcolor="black")
        self.TNotebook_Browse_settings_t3 = tk.Frame(self.TNotebook_Browse_settings)
        self.TNotebook_Browse_settings.add(self.TNotebook_Browse_settings_t3, padding=3)
        self.TNotebook_Browse_settings.tab(2, text="   Terminal   "
                ,compound="none", underline="-1", )
        self.TNotebook_Browse_settings_t3.configure(background="#d9d9d9")
        self.TNotebook_Browse_settings_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook_Browse_settings_t3.configure(highlightcolor="black")
        EISART_support.ctrl_nb = self.TNotebook_Browse_settings
        EISART_support.ctrl_nb_terminal = self.TNotebook_Browse_settings_t3

        self.Label_path = tk.Label(self.TNotebook_Browse_settings_t1)
        self.Label_path.place(relx=0.0, rely=0.019, height=25, width=36)
        self.Label_path.configure(activebackground="#f9f9f9")
        self.Label_path.configure(activeforeground="black")
        self.Label_path.configure(background="#d9d9d9")
        self.Label_path.configure(disabledforeground="#a3a3a3")
        self.Label_path.configure(foreground="#000000")
        self.Label_path.configure(highlightbackground="#d9d9d9")
        self.Label_path.configure(highlightcolor="black")
        self.Label_path.configure(text="Path:")
        self.Label_path_tooltip = \
            ToolTip(self.Label_path, self.tooltip_font, "Paste or enter the full path to a folder, \n"
                                                        "when done, press enter")

        self.Entry_browse_path = tk.Entry(self.TNotebook_Browse_settings_t1)
        self.Entry_browse_path.place(relx=0.091, rely=0.019, height=25
                , relwidth=0.76)
        self.Entry_browse_path.configure(background="white")
        self.Entry_browse_path.configure(disabledforeground="#a3a3a3")
        self.Entry_browse_path.configure(font="TkDefaultFont")
        self.Entry_browse_path.configure(foreground="#000000")
        self.Entry_browse_path.configure(highlightbackground="#d9d9d9")
        self.Entry_browse_path.configure(highlightcolor="black")
        self.Entry_browse_path.configure(insertbackground="black")
        self.Entry_browse_path.configure(selectbackground="#5f87c5")
        self.Entry_browse_path.configure(selectforeground="white")
        self.Entry_browse_path.bind("<Return>", EISART_support.command_for_path_entry)
        EISART_support.path_text_entry = self.Entry_browse_path
        # Do sth. on pressing enter reference: https://www.python-course.eu/tkinter_entry_widgets.php

        self.Button_browse = tk.Button(self.TNotebook_Browse_settings_t1)
        self.Button_browse.place(relx=0.862, rely=0.019, height=25, width=57)
        self.Button_browse.configure(activebackground="#ececec")
        self.Button_browse.configure(activeforeground="#000000")
        self.Button_browse.configure(background="#d9d9d9")
        self.Button_browse.configure(command=EISART_support.command_for_Button_browse)
        self.Button_browse.configure(disabledforeground="#a3a3a3")
        self.Button_browse.configure(foreground="#000000")
        self.Button_browse.configure(highlightbackground="#d9d9d9")
        self.Button_browse.configure(highlightcolor="black")
        self.Button_browse.configure(pady="0")
        self.Button_browse.configure(text="Browse...")
        self.Button_browse_tooltip = \
            ToolTip(self.Button_browse, self.tooltip_font, "Open folder browser...")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.Scrolledtreeview_filelist = ScrolledTreeView(self.TNotebook_Browse_settings_t1)
        self.Scrolledtreeview_filelist.place(relx=0.023, rely=0.094
                , relheight=0.889, relwidth=0.952)
        # self.Scrolledtreeview_filelist.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview_filelist.heading("#0",text="Filename")
        self.Scrolledtreeview_filelist.heading("#0",anchor="center")
        self.Scrolledtreeview_filelist.column("#0",width="200")
        self.Scrolledtreeview_filelist.column("#0",minwidth="20")
        self.Scrolledtreeview_filelist.column("#0",stretch="1")
        self.Scrolledtreeview_filelist.column("#0",anchor="w")
        # self.Scrolledtreeview_filelist.heading("Col1",text="Col1")
        # self.Scrolledtreeview_filelist.heading("Col1",anchor="center")
        # self.Scrolledtreeview_filelist.column("Col1",width="201")
        # self.Scrolledtreeview_filelist.column("Col1",minwidth="20")
        # self.Scrolledtreeview_filelist.column("Col1",stretch="1")
        # self.Scrolledtreeview_filelist.column("Col1",anchor="w")
        self.Scrolledtreeview_filelist.configure(selectmode='browse')
        # Double click reference: https://stackoverflow.com/questions/3794268/command-for-clicking-on-the-items-of-a-tkinter-treeview-widget
        self.Scrolledtreeview_filelist.bind("<Double-1>", EISART_support.command_for_Button_RefreshPlot)
        EISART_support.filelist = self.Scrolledtreeview_filelist

        self.TNotebook_File_DRT_settings = ttk.Notebook(self.TNotebook_Browse_settings_t2)
        self.TNotebook_File_DRT_settings.place(relx=0.0, rely=0.019
                , relheight=0.462, relwidth=1.0)
        self.TNotebook_File_DRT_settings.configure(takefocus="")
        self.TNotebook_File_DRT_settings_t1 = tk.Frame(self.TNotebook_File_DRT_settings)
        self.TNotebook_File_DRT_settings.add(self.TNotebook_File_DRT_settings_t1, padding=3)
        self.TNotebook_File_DRT_settings.tab(0, text="   File Settings   "
                ,compound="left", underline="-1", )
        self.TNotebook_File_DRT_settings_t1.configure(background="#d9d9d9")
        self.TNotebook_File_DRT_settings_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook_File_DRT_settings_t1.configure(highlightcolor="black")
        self.TNotebook_File_DRT_settings_t2 = tk.Frame(self.TNotebook_File_DRT_settings)
        self.TNotebook_File_DRT_settings.add(self.TNotebook_File_DRT_settings_t2, padding=3)
        self.TNotebook_File_DRT_settings.tab(1, text="   DRT Settings   "
                ,compound="left", underline="-1", )
        self.TNotebook_File_DRT_settings_t2.configure(background="#d9d9d9")
        self.TNotebook_File_DRT_settings_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook_File_DRT_settings_t2.configure(highlightcolor="black")

        self.Label_save_fmt = tk.Label(self.TNotebook_File_DRT_settings_t1)
        self.Label_save_fmt.place(relx=0.02, rely=0.059, relheight=0.153, relwidth=0.2)
        self.Label_save_fmt.configure(activebackground="#f9f9f9")
        self.Label_save_fmt.configure(activeforeground="black")
        self.Label_save_fmt.configure(background="#d9d9d9")
        self.Label_save_fmt.configure(disabledforeground="#a3a3a3")
        self.Label_save_fmt.configure(foreground="#000000")
        self.Label_save_fmt.configure(highlightbackground="#d9d9d9")
        self.Label_save_fmt.configure(highlightcolor="black")
        self.Label_save_fmt.configure(text="Save Format")
        self.Label_save_fmt_tooltip = \
            ToolTip(self.Label_save_fmt, self.tooltip_font, "File format in which the quantitative results are saved")

        self.TCombobox_save_fmt = ttk.Combobox(self.TNotebook_File_DRT_settings_t1)
        self.TCombobox_save_fmt.place(relx=0.25, rely=0.059, relheight=0.153, relwidth=0.142)
        self.TCombobox_save_fmt.configure(textvariable=EISART_support.combobox_sav_fmt)
        self.TCombobox_save_fmt.configure(values=['txt', 'csv'])
        self.TCombobox_save_fmt.configure(state='readonly')

        file_settings_lbfrm_rely = 0.241  # relative to self.TNotebook_File_DRT_settings_t1
        file_settings_lbfrm_relh = 0.706  # relative to self.TNotebook_File_DRT_settings_t1
        file_settings_adj_rely = 0.05  # relative to the above labelframes
        file_settings_row_relh = 0.20  # relative to the above labelframes

        self.Labelframe_data_to_save = tk.LabelFrame(self.TNotebook_File_DRT_settings_t1)
        self.Labelframe_data_to_save.place(relx=0.023, rely=file_settings_lbfrm_rely,
                                           relheight=file_settings_lbfrm_relh, relwidth=0.646)
        self.Labelframe_data_to_save.configure(relief='groove')
        self.Labelframe_data_to_save.configure(foreground="black")
        self.Labelframe_data_to_save.configure(text="Data to save")
        self.Labelframe_data_to_save.configure(background="#d9d9d9")
        self.Labelframe_data_to_save.configure(highlightbackground="#d9d9d9")
        self.Labelframe_data_to_save.configure(highlightcolor="black")

        self.Checkbutton_conv_ism = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_conv_ism.place(relx=0.033, rely=file_settings_row_relh - file_settings_adj_rely,
                                        relheight=file_settings_row_relh,
                                        relwidth=0.45, bordermode='ignore')
        self.Checkbutton_conv_ism.configure(activebackground="#ececec")
        self.Checkbutton_conv_ism.configure(activeforeground="#000000")
        self.Checkbutton_conv_ism.configure(anchor='w')
        self.Checkbutton_conv_ism.configure(background="#d9d9d9")
        self.Checkbutton_conv_ism.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_conv_ism.configure(foreground="#000000")
        self.Checkbutton_conv_ism.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_conv_ism.configure(highlightcolor="black")
        self.Checkbutton_conv_ism.configure(justify='left')
        self.Checkbutton_conv_ism.configure(text="Convert *.ism")
        self.Checkbutton_conv_ism.configure(variable=EISART_support.che_cnv_ism)
        self.Checkbutton_conv_ism_tooltip = \
            ToolTip(self.Checkbutton_conv_ism, self.tooltip_font,
                    "Save unmodified input data as generally readable files\n"
                    "if the input data is in the Zahner/Thales *.ism format")

        self.Checkbutton_save_plots = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_save_plots.place(relx=0.6, rely=file_settings_row_relh - file_settings_adj_rely,
                                          relheight=file_settings_row_relh,
                                          relwidth=0.38, bordermode='ignore')
        self.Checkbutton_save_plots.configure(activebackground="#ececec")
        self.Checkbutton_save_plots.configure(activeforeground="#000000")
        self.Checkbutton_save_plots.configure(anchor='w')
        self.Checkbutton_save_plots.configure(background="#d9d9d9")
        self.Checkbutton_save_plots.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_save_plots.configure(foreground="#000000")
        self.Checkbutton_save_plots.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_save_plots.configure(highlightcolor="black")
        self.Checkbutton_save_plots.configure(justify='left')
        self.Checkbutton_save_plots.configure(text="Save plots")
        self.Checkbutton_save_plots.configure(variable=EISART_support.che_sav_plt)
        self.Checkbutton_save_plots_tooltip = \
        ToolTip(self.Checkbutton_save_plots, self.tooltip_font, "Save plot for each file when batch processing")

        self.Checkbutton_save_ref_drt = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_save_ref_drt.place(relx=0.033, rely=file_settings_row_relh*2 - file_settings_adj_rely,
                                            relheight=file_settings_row_relh, relwidth=0.933, bordermode='ignore')
        self.Checkbutton_save_ref_drt.configure(activebackground="#ececec")
        self.Checkbutton_save_ref_drt.configure(activeforeground="#000000")
        self.Checkbutton_save_ref_drt.configure(anchor='w')
        self.Checkbutton_save_ref_drt.configure(background="#d9d9d9")
        self.Checkbutton_save_ref_drt.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_save_ref_drt.configure(foreground="#000000")
        self.Checkbutton_save_ref_drt.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_save_ref_drt.configure(highlightcolor="black")
        self.Checkbutton_save_ref_drt.configure(justify='left')
        self.Checkbutton_save_ref_drt.configure(text="Save ref. DRT or smoothed EIS")
        self.Checkbutton_save_ref_drt.configure(variable=EISART_support.che_sav_ref_drt)
        self.Checkbutton_save_ref_drt_tooltip = \
            ToolTip(self.Checkbutton_save_ref_drt, self.tooltip_font,
                    "Save the DRT of the input data as files if K-K test mode in DRT settings is not ticked, \n"
                    "Save the smoothed EIS of the input data as files if K-K test mode in DRT settings is ticked")

        self.Checkbutton_save_ecm_eis_drt = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_save_ecm_eis_drt.place(relx=0.033, rely=file_settings_row_relh*3 - file_settings_adj_rely,
                                                relheight=file_settings_row_relh, relwidth=0.55, bordermode='ignore')
        self.Checkbutton_save_ecm_eis_drt.configure(activebackground="#ececec")
        self.Checkbutton_save_ecm_eis_drt.configure(activeforeground="#000000")
        self.Checkbutton_save_ecm_eis_drt.configure(anchor='w')
        self.Checkbutton_save_ecm_eis_drt.configure(background="#d9d9d9")
        self.Checkbutton_save_ecm_eis_drt.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_save_ecm_eis_drt.configure(foreground="#000000")
        self.Checkbutton_save_ecm_eis_drt.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_save_ecm_eis_drt.configure(highlightcolor="black")
        self.Checkbutton_save_ecm_eis_drt.configure(justify='left')
        self.Checkbutton_save_ecm_eis_drt.configure(text="Save EIS&DRT of ECM")
        self.Checkbutton_save_ecm_eis_drt.configure(variable=EISART_support.che_sav_ecm_eis_drt)
        self.Checkbutton_save_ecm_eis_drt_tooltip = \
            ToolTip(self.Checkbutton_save_ecm_eis_drt, self.tooltip_font,
                    "Save the simulated EIS of the ECM and the DRT of the simulated EIS as files")

        self.Checkbutton_sav_wt = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_sav_wt.place(relx=0.6, rely=file_settings_row_relh*3 - file_settings_adj_rely,
                                      relheight=file_settings_row_relh, relwidth=0.38, bordermode='ignore')
        self.Checkbutton_sav_wt.configure(activebackground="#ececec")
        self.Checkbutton_sav_wt.configure(activeforeground="#000000")
        self.Checkbutton_sav_wt.configure(anchor='w')
        self.Checkbutton_sav_wt.configure(background="#d9d9d9")
        self.Checkbutton_sav_wt.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_sav_wt.configure(foreground="#000000")
        self.Checkbutton_sav_wt.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_sav_wt.configure(highlightcolor="black")
        self.Checkbutton_sav_wt.configure(justify='left')
        self.Checkbutton_sav_wt.configure(text="Save weights")
        self.Checkbutton_sav_wt.configure(variable=EISART_support.che_sav_weights)
        self.Checkbutton_sav_wt_tooltip = \
            ToolTip(self.Checkbutton_sav_wt, self.tooltip_font, "Save the weights on the input data as files")

        self.Checkbutton_sav_resi = tk.Checkbutton(self.Labelframe_data_to_save)
        self.Checkbutton_sav_resi.place(relx=0.033, rely=file_settings_row_relh*4 - file_settings_adj_rely,
                                        relheight=file_settings_row_relh, relwidth=0.433, bordermode='ignore')
        self.Checkbutton_sav_resi.configure(activebackground="#ececec")
        self.Checkbutton_sav_resi.configure(activeforeground="#000000")
        self.Checkbutton_sav_resi.configure(anchor='w')
        self.Checkbutton_sav_resi.configure(background="#d9d9d9")
        self.Checkbutton_sav_resi.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_sav_resi.configure(foreground="#000000")
        self.Checkbutton_sav_resi.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_sav_resi.configure(highlightcolor="black")
        self.Checkbutton_sav_resi.configure(justify='left')
        self.Checkbutton_sav_resi.configure(text="Save residuals")
        self.Checkbutton_sav_resi.configure(variable=EISART_support.che_sav_resi)
        self.Checkbutton_sav_resi_tooltip = \
            ToolTip(self.Checkbutton_sav_resi, self.tooltip_font, "Save relative fitting residuals as files")

        self.Labelframe_batch_settings = tk.LabelFrame(self.TNotebook_File_DRT_settings_t1)
        self.Labelframe_batch_settings.place(relx=0.688, rely=file_settings_lbfrm_rely,
                                             relheight=file_settings_lbfrm_relh, relwidth=0.289)
        self.Labelframe_batch_settings.configure(relief='groove')
        self.Labelframe_batch_settings.configure(foreground="black")
        self.Labelframe_batch_settings.configure(text="Batch Settings")
        self.Labelframe_batch_settings.configure(background="#d9d9d9")
        self.Labelframe_batch_settings.configure(highlightbackground="#d9d9d9")
        self.Labelframe_batch_settings.configure(highlightcolor="black")

        self.Checkbutton_plot_each = tk.Checkbutton(self.Labelframe_batch_settings)
        self.Checkbutton_plot_each.place(relx=0.092, rely=file_settings_row_relh - file_settings_adj_rely,
                                         relheight=file_settings_row_relh, relwidth=0.835, bordermode='ignore')
        self.Checkbutton_plot_each.configure(activebackground="#ececec")
        self.Checkbutton_plot_each.configure(activeforeground="#000000")
        self.Checkbutton_plot_each.configure(anchor='w')
        self.Checkbutton_plot_each.configure(background="#d9d9d9")
        self.Checkbutton_plot_each.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_plot_each.configure(foreground="#000000")
        self.Checkbutton_plot_each.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_plot_each.configure(highlightcolor="black")
        self.Checkbutton_plot_each.configure(text="Plot each")
        self.Checkbutton_plot_each.configure(variable=EISART_support.che_plt_each)
        self.Checkbutton_plot_each_tooltip = \
            ToolTip(self.Checkbutton_plot_each, self.tooltip_font, "Plot for each file when batch processing")

        self.Checkbutton_save_data = tk.Checkbutton(self.Labelframe_batch_settings)
        self.Checkbutton_save_data.place(relx=0.092, rely=file_settings_row_relh*2 - file_settings_adj_rely,
                                         relheight=file_settings_row_relh, relwidth=0.835, bordermode='ignore')
        self.Checkbutton_save_data.configure(activebackground="#ececec")
        self.Checkbutton_save_data.configure(activeforeground="#000000")
        self.Checkbutton_save_data.configure(anchor='w')
        self.Checkbutton_save_data.configure(background="#d9d9d9")
        self.Checkbutton_save_data.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_save_data.configure(foreground="#000000")
        self.Checkbutton_save_data.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_save_data.configure(highlightcolor="black")
        self.Checkbutton_save_data.configure(justify='left')
        self.Checkbutton_save_data.configure(text="Save data")
        self.Checkbutton_save_data.configure(variable=EISART_support.che_sav_dat)
        self.Checkbutton_save_data_tooltip = \
            ToolTip(self.Checkbutton_save_data, self.tooltip_font,
                    "Save quantitative results for each file when batch processing")

        self.Button_batch = tk.Button(self.Labelframe_batch_settings)
        self.Button_batch.place(relx=0.092, rely=file_settings_row_relh*3 - file_settings_adj_rely,
                                relheight=file_settings_row_relh*2, relwidth=0.816)
        self.Button_batch.configure(activebackground="#ececec")
        self.Button_batch.configure(activeforeground="#000000")
        self.Button_batch.configure(background="#d9d9d9")
        self.Button_batch.configure(command=EISART_support.command_for_Button_batch)
        self.Button_batch.configure(disabledforeground="#a3a3a3")
        self.Button_batch.configure(foreground="#000000")
        self.Button_batch.configure(highlightbackground="#d9d9d9")
        self.Button_batch.configure(highlightcolor="black")
        self.Button_batch.configure(pady="0")
        self.Button_batch.configure(text="Start Batch")
        self.Button_batch_tooltip = \
            ToolTip(self.Button_batch, self.tooltip_font,
                    "Start batch processing for each supported file in the specified folder. \n"
                    "The results are automatically saved if saving is enabled")

        del file_settings_lbfrm_rely  # using these variables hereafter would result in errors
        del file_settings_lbfrm_relh
        del file_settings_adj_rely
        del file_settings_row_relh

        self.Checkbutton_kk = tk.Checkbutton(self.TNotebook_File_DRT_settings_t2)
        self.Checkbutton_kk.place(relx=0.0, rely=0.05, relheight=0.147, relwidth=0.275)
        self.Checkbutton_kk.configure(activebackground="#ececec")
        self.Checkbutton_kk.configure(activeforeground="#000000")
        self.Checkbutton_kk.configure(background="#d9d9d9")
        self.Checkbutton_kk.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_kk.configure(foreground="#000000")
        self.Checkbutton_kk.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_kk.configure(highlightcolor="black")
        self.Checkbutton_kk.configure(justify='left')
        self.Checkbutton_kk.configure(anchor='nw')
        self.Checkbutton_kk.configure(text="K-K Test Mode")
        self.Checkbutton_kk.configure(variable=EISART_support.che_kk)
        self.Checkbutton_kk_tooltip = \
            ToolTip(self.Checkbutton_kk, self.tooltip_font,
                    "Display the weighted Kramers-Kronig test result, DRT plot may appear pulsed and ECM fitting is disabled. \n")

        self.Checkbutton_fls_pk_sup = tk.Checkbutton(self.TNotebook_File_DRT_settings_t2)
        self.Checkbutton_fls_pk_sup.place(relx=0.297, rely=0.05, relheight=0.147, relwidth=0.275)
        self.Checkbutton_fls_pk_sup.configure(activebackground="#ececec")
        self.Checkbutton_fls_pk_sup.configure(activeforeground="#000000")
        self.Checkbutton_fls_pk_sup.configure(background="#d9d9d9")
        self.Checkbutton_fls_pk_sup.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_fls_pk_sup.configure(foreground="#000000")
        self.Checkbutton_fls_pk_sup.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_fls_pk_sup.configure(highlightcolor="black")
        self.Checkbutton_fls_pk_sup.configure(justify='left')
        self.Checkbutton_fls_pk_sup.configure(anchor='nw')
        self.Checkbutton_fls_pk_sup.configure(text="False Peak Sup.")
        self.Checkbutton_fls_pk_sup.configure(variable=EISART_support.che_fls_pk_sup)
        self.Checkbutton_fls_pk_sup_tooltip = \
            ToolTip(self.Checkbutton_fls_pk_sup, self.tooltip_font, "Suppress the possibly false peaks at the edge of the DRT frequency/tau range")

        self.Label_wt_iter = tk.Label(self.TNotebook_File_DRT_settings_t2)
        self.Label_wt_iter.place(relx=0.697, rely=0.03, relheight=0.147, width=72)
        self.Label_wt_iter.configure(activebackground="#f9f9f9")
        self.Label_wt_iter.configure(activeforeground="black")
        self.Label_wt_iter.configure(background="#d9d9d9")
        self.Label_wt_iter.configure(disabledforeground="#a3a3a3")
        self.Label_wt_iter.configure(foreground="#000000")
        self.Label_wt_iter.configure(highlightbackground="#d9d9d9")
        self.Label_wt_iter.configure(highlightcolor="black")
        self.Label_wt_iter.configure(text="Weight Iter.")
        self.Label_wt_iter_tooltip = \
            ToolTip(self.Label_wt_iter, self.tooltip_font, "Re-weighing iteration count.\nUse it when screening is not satisfactory")

        self.Spinbox_wt_iter = tk.Spinbox(self.TNotebook_File_DRT_settings_t2, from_=0.0, to=20.0)
        self.Spinbox_wt_iter.place(relx=0.881, rely=0.03, relheight=0.147, relwidth=0.103)
        self.Spinbox_wt_iter.configure(activebackground="#f9f9f9")
        self.Spinbox_wt_iter.configure(background="white")
        self.Spinbox_wt_iter.configure(buttonbackground="#d9d9d9")
        self.Spinbox_wt_iter.configure(disabledforeground="#a3a3a3")
        self.Spinbox_wt_iter.configure(font="TkDefaultFont")
        self.Spinbox_wt_iter.configure(foreground="black")
        self.Spinbox_wt_iter.configure(highlightbackground="black")
        self.Spinbox_wt_iter.configure(highlightcolor="black")
        self.Spinbox_wt_iter.configure(insertbackground="black")
        self.Spinbox_wt_iter.configure(selectbackground="#5f87c5")
        self.Spinbox_wt_iter.configure(selectforeground="white")
        self.Spinbox_wt_iter.configure(textvariable=EISART_support.spinbox_wt_iter)

        self.Label_R_inf = tk.Label(self.TNotebook_File_DRT_settings_t2)
        self.Label_R_inf.configure(activebackground="#f9f9f9", activeforeground="black", background="#d9d9d9",
                                   disabledforeground="#a3a3a3", foreground="#000000", highlightbackground="#d9d9d9",
                                   highlightcolor="black", text="R_inf = ", justify='left')
        self.Label_R_inf.place(relx=0.0, rely=0.19, relheight=0.14, width=50)
        self.Label_R_inf_tooltip = \
            ToolTip(self.Label_R_inf, self.tooltip_font,
                    "User specified R_inf in Ohm * cm^2.\nThis value is fixed throughout the evaluation\n"
                    "Leave it blank to let EISART automatically determine R_inf")

        self.Entry_R_inf = tk.Entry(self.TNotebook_File_DRT_settings_t2)
        self.Entry_R_inf.place(x=50, rely=0.19, relheight=0.14, relwidth=0.1)
        self.Entry_R_inf.configure(background="white", disabledforeground="#a3a3a3", font="TkDefaultFont",
                                   foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="black",
                                   insertbackground="black", selectbackground="#5f87c5", selectforeground="white",
                                   textvariable=EISART_support.txt_var_R_inf)

        self.Label_L = tk.Label(self.TNotebook_File_DRT_settings_t2)
        self.Label_L.configure(activebackground="#f9f9f9", activeforeground="black", background="#d9d9d9",
                               disabledforeground="#a3a3a3", foreground="#000000", highlightbackground="#d9d9d9",
                               highlightcolor="black", text="L = ", justify='left')
        self.Label_L.place(relx=0.3, rely=0.19, relheight=0.14, width=30)
        self.Label_L_tooltip = \
            ToolTip(self.Label_L, self.tooltip_font,
                    "User specified L_self and L_wire in uH.\nThis value is fixed throughout the evaluation\n"
                    "L_self is the self induction of the test object. It only affects the imaginary part.\n"
                    "L_wire is a non-physical parameter accounting for mutual induction among wires. "
                    "It only affects the real part.\n"
                    "Leave the entry blank to let EISART automatically determine L_self and/or L_wire")

        self.Entry_L_self = tk.Entry(self.TNotebook_File_DRT_settings_t2)
        self.Entry_L_self.place(relx=0.36, rely=0.19, relheight=0.14, relwidth=0.1)
        self.Entry_L_self.configure(background="white", disabledforeground="#a3a3a3", font="TkDefaultFont",
                                    foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="black",
                                    insertbackground="black", selectbackground="#5f87c5", selectforeground="white",
                                    textvariable=EISART_support.txt_var_L_self)

        self.Label_L_separator = tk.Label(self.TNotebook_File_DRT_settings_t2)
        self.Label_L_separator.configure(activebackground="#f9f9f9", activeforeground="black", background="#d9d9d9",
                                         disabledforeground="#a3a3a3", foreground="#000000", highlightbackground="#d9d9d9",
                                         highlightcolor="black", text=",", justify='center')
        self.Label_L_separator.place(relx=0.46, rely=0.19, relheight=0.14, relwidth=0.02)
        self.Label_L_separator_tooltip = \
            ToolTip(self.Label_L_separator, self.tooltip_font,
                    "← L_self (uH), L_wire (numerical equivalent to uH) →")

        self.Entry_L_wire = tk.Entry(self.TNotebook_File_DRT_settings_t2)
        self.Entry_L_wire.place(relx=0.48, rely=0.19, relheight=0.14, relwidth=0.1)
        self.Entry_L_wire.configure(background="white", disabledforeground="#a3a3a3", font="TkDefaultFont",
                                    foreground="#000000", highlightbackground="#d9d9d9", highlightcolor="black",
                                    insertbackground="black", selectbackground="#5f87c5", selectforeground="white",
                                    textvariable=EISART_support.txt_var_L_wire)

        self.Labelframe_regularize = tk.LabelFrame(self.TNotebook_File_DRT_settings_t2, relief='groove',
                                                   foreground="black", text="Regularization", background="#d9d9d9",
                                                   highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_regularize.place(relx=0.0, rely=0.36, relheight=0.64, relwidth=0.28)

        self.Checkbutton_auto_lmd = tk.Checkbutton(self.Labelframe_regularize)
        self.Checkbutton_auto_lmd.place(relx=0.05, rely=0.06, relheight=0.26, relwidth=0.91)
        self.Checkbutton_auto_lmd.configure(activebackground="#ececec", activeforeground="#000000", background="#d9d9d9",
                                            disabledforeground="#a3a3a3", foreground="#000000",
                                            highlightbackground="#d9d9d9", highlightcolor="black",
                                            justify='left', text="Auto lambda",
                                            variable=EISART_support.che_auto_lmd, anchor='nw',
                                            command=self.che_auto_lmd_cmd)
        self.Checkbutton_auto_lmd_tooltip = \
            ToolTip(self.Checkbutton_auto_lmd, self.tooltip_font,
                    "Enable increasing lambda for frequencies with lower weights")

        self.Label_lmd = tk.Label(self.Labelframe_regularize)
        self.Label_lmd.place(relx=0.05, rely=0.37, relheight=0.26, relwidth=0.54)
        self.Label_lmd.configure(activebackground="#f9f9f9")
        self.Label_lmd.configure(activeforeground="black")
        self.Label_lmd.configure(background="#d9d9d9")
        self.Label_lmd.configure(disabledforeground="#a3a3a3")
        self.Label_lmd.configure(foreground="#000000")
        self.Label_lmd.configure(highlightbackground="#d9d9d9")
        self.Label_lmd.configure(highlightcolor="black")
        self.Label_lmd.configure(anchor='w')
        self.Label_lmd.configure(text="Lambda")
        self.Label_lmd_tooltip = \
            ToolTip(self.Label_lmd, self.tooltip_font,
                    "Lambda, the Tikhonov regularization factor, similar to DRTtools in MATLAB, 1e-3 recommended\n"
                    "The higher this value, the less likely false peaks appear and more details are smoothed out")

        self.Entry_lmd = tk.Entry(self.Labelframe_regularize)
        self.Entry_lmd.place(relx=0.61, rely=0.37, relheight=0.26, relwidth=0.35)
        self.Entry_lmd.configure(background="white")
        self.Entry_lmd.configure(disabledforeground="#a3a3a3")
        self.Entry_lmd.configure(font="TkDefaultFont")
        self.Entry_lmd.configure(foreground="#000000")
        self.Entry_lmd.configure(highlightbackground="#d9d9d9")
        self.Entry_lmd.configure(highlightcolor="black")
        self.Entry_lmd.configure(insertbackground="black")
        self.Entry_lmd.configure(selectbackground="#5f87c5")
        self.Entry_lmd.configure(selectforeground="white")
        self.Entry_lmd.configure(textvariable=EISART_support.txt_var_lmd)

        self.Label_auto_lmd_rad = tk.Label(self.Labelframe_regularize)
        self.Label_auto_lmd_rad.place(relx=0.05, rely=0.69, relheight=0.26, relwidth=0.54)
        self.Label_auto_lmd_rad.configure(activebackground="#f9f9f9")
        self.Label_auto_lmd_rad.configure(activeforeground="black")
        self.Label_auto_lmd_rad.configure(background="#d9d9d9")
        self.Label_auto_lmd_rad.configure(disabledforeground="#a3a3a3")
        self.Label_auto_lmd_rad.configure(foreground="#000000")
        self.Label_auto_lmd_rad.configure(highlightbackground="#d9d9d9")
        self.Label_auto_lmd_rad.configure(highlightcolor="black")
        self.Label_auto_lmd_rad.configure(anchor='w')
        self.Label_auto_lmd_rad.configure(text="Radius")
        self.Label_auto_lmd_rad_tooltip = \
            ToolTip(self.Label_auto_lmd_rad, self.tooltip_font,
                    "Weight distribution smoothing radius (decades of tau or frequency)\n"
                    "    for increasing lambda at frequencies with lower weights")

        self.Spinbox_auto_lmd_rad = tk.Spinbox(self.Labelframe_regularize, from_=0.1, to=10.0)
        self.Spinbox_auto_lmd_rad.place(relx=0.61, rely=0.69, relheight=0.26, relwidth=0.35)
        self.Spinbox_auto_lmd_rad.configure(activebackground="#f9f9f9")
        self.Spinbox_auto_lmd_rad.configure(background="white")
        self.Spinbox_auto_lmd_rad.configure(buttonbackground="#d9d9d9")
        self.Spinbox_auto_lmd_rad.configure(disabledforeground="#a3a3a3")
        self.Spinbox_auto_lmd_rad.configure(increment="0.1")
        self.Spinbox_auto_lmd_rad.configure(font="TkDefaultFont")
        self.Spinbox_auto_lmd_rad.configure(foreground="black")
        self.Spinbox_auto_lmd_rad.configure(highlightbackground="black")
        self.Spinbox_auto_lmd_rad.configure(highlightcolor="black")
        self.Spinbox_auto_lmd_rad.configure(insertbackground="black")
        self.Spinbox_auto_lmd_rad.configure(selectbackground="#5f87c5")
        self.Spinbox_auto_lmd_rad.configure(selectforeground="white")
        self.Spinbox_auto_lmd_rad.configure(textvariable=EISART_support.spinbox_auto_lmd_rad)

        self.Labelframe_screening = tk.LabelFrame(self.TNotebook_File_DRT_settings_t2, relief='groove',
                                                  foreground="black", text="Screening", background="#d9d9d9",
                                                  highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_screening.place(relx=0.3, rely=0.36, relheight=0.64, relwidth=0.30)

        self.Label_trim_unskip = tk.Label(self.Labelframe_screening)
        self.Label_trim_unskip.place(relx=0.05, rely=0.02, relheight=0.26, relwidth=0.54)
        self.Label_trim_unskip.configure(activebackground="#f9f9f9")
        self.Label_trim_unskip.configure(activeforeground="black")
        self.Label_trim_unskip.configure(background="#d9d9d9")
        self.Label_trim_unskip.configure(disabledforeground="#a3a3a3")
        self.Label_trim_unskip.configure(foreground="#000000")
        self.Label_trim_unskip.configure(highlightbackground="#d9d9d9")
        self.Label_trim_unskip.configure(highlightcolor="black")
        self.Label_trim_unskip.configure(text="Unskip")
        self.Label_trim_unskip_tooltip = \
            ToolTip(self.Label_trim_unskip, self.tooltip_font,
                    "Minimum number of EIS data points to be examined by the screener")

        self.Spinbox_trim_unskip = tk.Spinbox(self.Labelframe_screening, from_=0.0, to=20.0)
        self.Spinbox_trim_unskip.place(relx=0.65, rely=0.02, relheight=0.26, relwidth=0.31)
        self.Spinbox_trim_unskip.configure(activebackground="#f9f9f9")
        self.Spinbox_trim_unskip.configure(background="white")
        self.Spinbox_trim_unskip.configure(buttonbackground="#d9d9d9")
        self.Spinbox_trim_unskip.configure(disabledforeground="#a3a3a3")
        self.Spinbox_trim_unskip.configure(font="TkDefaultFont")
        self.Spinbox_trim_unskip.configure(foreground="black")
        self.Spinbox_trim_unskip.configure(highlightbackground="black")
        self.Spinbox_trim_unskip.configure(highlightcolor="black")
        self.Spinbox_trim_unskip.configure(insertbackground="black")
        self.Spinbox_trim_unskip.configure(selectbackground=_slcolor)
        self.Spinbox_trim_unskip.configure(selectforeground="white")
        self.Spinbox_trim_unskip.configure(textvariable=EISART_support.spinbox_trim_unskip)

        self.Label_flt_lvl = tk.Label(self.Labelframe_screening)
        self.Label_flt_lvl.place(relx=0.05, rely=0.37, relheight=0.26, relwidth=0.54)
        self.Label_flt_lvl.configure(activebackground="#f9f9f9")
        self.Label_flt_lvl.configure(activeforeground="black")
        self.Label_flt_lvl.configure(background="#d9d9d9")
        self.Label_flt_lvl.configure(disabledforeground="#a3a3a3")
        self.Label_flt_lvl.configure(foreground="#000000")
        self.Label_flt_lvl.configure(highlightbackground="#d9d9d9")
        self.Label_flt_lvl.configure(highlightcolor="black")
        self.Label_flt_lvl.configure(text="Filter lvl.")
        self.Label_flt_lvl_tooltip = \
        ToolTip(self.Label_flt_lvl, self.tooltip_font, "The higher this value, the more likely data points are treated as bad points")

        self.Spinbox_flt_lvl = tk.Spinbox(self.Labelframe_screening, from_=0.0, to=1.0)
        self.Spinbox_flt_lvl.place(relx=0.65, rely=0.37, relheight=0.26, relwidth=0.31)
        self.Spinbox_flt_lvl.configure(activebackground="#f9f9f9")
        self.Spinbox_flt_lvl.configure(background="white")
        self.Spinbox_flt_lvl.configure(buttonbackground="#d9d9d9")
        self.Spinbox_flt_lvl.configure(disabledforeground="#a3a3a3")
        self.Spinbox_flt_lvl.configure(font="TkDefaultFont")
        self.Spinbox_flt_lvl.configure(foreground="black")
        self.Spinbox_flt_lvl.configure(highlightbackground="black")
        self.Spinbox_flt_lvl.configure(highlightcolor="black")
        self.Spinbox_flt_lvl.configure(increment="0.1")
        self.Spinbox_flt_lvl.configure(insertbackground="black")
        self.Spinbox_flt_lvl.configure(selectbackground="#5f87c5")
        self.Spinbox_flt_lvl.configure(selectforeground="white")
        self.Spinbox_flt_lvl.configure(textvariable=EISART_support.spinbox_flt_lvl)

        self.Label_max_trim = tk.Label(self.Labelframe_screening)
        self.Label_max_trim.place(relx=0.05, rely=0.69, relheight=0.26, relwidth=0.54)
        self.Label_max_trim.configure(activebackground="#f9f9f9")
        self.Label_max_trim.configure(activeforeground="black")
        self.Label_max_trim.configure(background="#d9d9d9")
        self.Label_max_trim.configure(disabledforeground="#a3a3a3")
        self.Label_max_trim.configure(foreground="#000000")
        self.Label_max_trim.configure(highlightbackground="#d9d9d9")
        self.Label_max_trim.configure(highlightcolor="black")
        self.Label_max_trim.configure(text="Max Trim")
        self.Label_max_trim_tooltip = \
            ToolTip(self.Label_max_trim, self.tooltip_font, "Maximum number of EIS data points to be trimmed by the screener")

        self.Spinbox_max_trim = tk.Spinbox(self.Labelframe_screening, from_=0.0, to=200.0)
        self.Spinbox_max_trim.place(relx=0.65, rely=0.69, relheight=0.26, relwidth=0.31)
        self.Spinbox_max_trim.configure(activebackground="#f9f9f9")
        self.Spinbox_max_trim.configure(background="white")
        self.Spinbox_max_trim.configure(buttonbackground="#d9d9d9")
        self.Spinbox_max_trim.configure(disabledforeground="#a3a3a3")
        self.Spinbox_max_trim.configure(font="TkDefaultFont")
        self.Spinbox_max_trim.configure(foreground="black")
        self.Spinbox_max_trim.configure(highlightbackground="black")
        self.Spinbox_max_trim.configure(highlightcolor="black")
        self.Spinbox_max_trim.configure(insertbackground="black")
        self.Spinbox_max_trim.configure(selectbackground=_slcolor)
        self.Spinbox_max_trim.configure(selectforeground="white")
        self.Spinbox_max_trim.configure(textvariable=EISART_support.spinbox_max_trim)

        self.Labelframe_ranges = tk.LabelFrame(self.TNotebook_File_DRT_settings_t2, relief='groove',
                                               foreground="black", text="Ranges", background="#d9d9d9",
                                               highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_ranges.place(relx=0.62, rely=0.18, relheight=0.82, relwidth=0.38)

        self.Label_eis_lf_dis = tk.Label(self.Labelframe_ranges)
        self.Label_eis_lf_dis.place(relx=0.02, rely=0.00, relheight=0.22, relwidth=0.66)
        self.Label_eis_lf_dis.configure(activebackground="#f9f9f9")
        self.Label_eis_lf_dis.configure(activeforeground="black")
        self.Label_eis_lf_dis.configure(background="#d9d9d9")
        self.Label_eis_lf_dis.configure(disabledforeground="#a3a3a3")
        self.Label_eis_lf_dis.configure(foreground="#000000")
        self.Label_eis_lf_dis.configure(highlightbackground="#d9d9d9")
        self.Label_eis_lf_dis.configure(highlightcolor="black")
        self.Label_eis_lf_dis.configure(justify='left')
        self.Label_eis_lf_dis.configure(anchor='e')
        self.Label_eis_lf_dis.configure(text="EIS LF. Dis. Dec.")
        self.Label_eis_lf_dis_tooltip = \
            ToolTip(self.Label_eis_lf_dis, self.tooltip_font,
                    "Decades of the lowest frequencies in EIS data to discard")

        self.Spinbox_eis_lf_dis = tk.Spinbox(self.Labelframe_ranges, from_=0.0, to=5.0)
        self.Spinbox_eis_lf_dis.place(relx=0.72, rely=0.00, relheight=0.22, relwidth=0.24)
        self.Spinbox_eis_lf_dis.configure(activebackground="#f9f9f9")
        self.Spinbox_eis_lf_dis.configure(background="white")
        self.Spinbox_eis_lf_dis.configure(buttonbackground="#d9d9d9")
        self.Spinbox_eis_lf_dis.configure(disabledforeground="#a3a3a3")
        self.Spinbox_eis_lf_dis.configure(font="TkDefaultFont")
        self.Spinbox_eis_lf_dis.configure(foreground="black")
        self.Spinbox_eis_lf_dis.configure(highlightbackground="black")
        self.Spinbox_eis_lf_dis.configure(highlightcolor="black")
        self.Spinbox_eis_lf_dis.configure(increment="0.1")
        self.Spinbox_eis_lf_dis.configure(insertbackground="black")
        self.Spinbox_eis_lf_dis.configure(selectbackground="#5f87c5")
        self.Spinbox_eis_lf_dis.configure(selectforeground="white")
        self.Spinbox_eis_lf_dis.configure(textvariable=EISART_support.spinbox_eis_lf_dis)

        self.Label_eis_hf_dis = tk.Label(self.Labelframe_ranges)
        self.Label_eis_hf_dis.place(relx=0.02, rely=0.25, relheight=0.22, relwidth=0.66)
        self.Label_eis_hf_dis.configure(activebackground="#f9f9f9")
        self.Label_eis_hf_dis.configure(activeforeground="black")
        self.Label_eis_hf_dis.configure(background="#d9d9d9")
        self.Label_eis_hf_dis.configure(disabledforeground="#a3a3a3")
        self.Label_eis_hf_dis.configure(foreground="#000000")
        self.Label_eis_hf_dis.configure(highlightbackground="#d9d9d9")
        self.Label_eis_hf_dis.configure(highlightcolor="black")
        self.Label_eis_hf_dis.configure(justify='left')
        self.Label_eis_hf_dis.configure(anchor='e')
        self.Label_eis_hf_dis.configure(text="EIS HF. Dis. Dec.")
        self.Label_eis_hf_dis_tooltip = \
            ToolTip(self.Label_eis_hf_dis, self.tooltip_font,
                    "Decades of the highest frequencies in EIS data to discard")

        self.Spinbox_eis_hf_dis = tk.Spinbox(self.Labelframe_ranges, from_=0.0, to=5.0)
        self.Spinbox_eis_hf_dis.place(relx=0.72, rely=0.25, relheight=0.22, relwidth=0.24)
        self.Spinbox_eis_hf_dis.configure(activebackground="#f9f9f9")
        self.Spinbox_eis_hf_dis.configure(background="white")
        self.Spinbox_eis_hf_dis.configure(buttonbackground="#d9d9d9")
        self.Spinbox_eis_hf_dis.configure(disabledforeground="#a3a3a3")
        self.Spinbox_eis_hf_dis.configure(font="TkDefaultFont")
        self.Spinbox_eis_hf_dis.configure(foreground="black")
        self.Spinbox_eis_hf_dis.configure(highlightbackground="black")
        self.Spinbox_eis_hf_dis.configure(highlightcolor="black")
        self.Spinbox_eis_hf_dis.configure(increment="0.1")
        self.Spinbox_eis_hf_dis.configure(insertbackground="black")
        self.Spinbox_eis_hf_dis.configure(selectbackground=_slcolor)
        self.Spinbox_eis_hf_dis.configure(selectforeground="white")
        self.Spinbox_eis_hf_dis.configure(textvariable=EISART_support.spinbox_eis_hf_dis)

        self.Label_drt_lf_ext = tk.Label(self.Labelframe_ranges)
        self.Label_drt_lf_ext.place(relx=0.02, rely=0.50, relheight=0.22, relwidth=0.66)
        self.Label_drt_lf_ext.configure(activebackground="#f9f9f9")
        self.Label_drt_lf_ext.configure(activeforeground="black")
        self.Label_drt_lf_ext.configure(background="#d9d9d9")
        self.Label_drt_lf_ext.configure(disabledforeground="#a3a3a3")
        self.Label_drt_lf_ext.configure(foreground="#000000")
        self.Label_drt_lf_ext.configure(highlightbackground="#d9d9d9")
        self.Label_drt_lf_ext.configure(highlightcolor="black")
        self.Label_drt_lf_ext.configure(justify='left')
        self.Label_drt_lf_ext.configure(anchor='e')
        self.Label_drt_lf_ext.configure(text="DRT LF. Ext. Dec.")
        self.Label_drt_lf_ext_tooltip = \
            ToolTip(self.Label_drt_lf_ext, self.tooltip_font, "Decades of the lowest frequencies / longest taus in DRT extended beyond the EIS frequency range")

        self.Spinbox_drt_lf_ext = tk.Spinbox(self.Labelframe_ranges, from_=-3.0, to=3.0)
        self.Spinbox_drt_lf_ext.place(relx=0.72, rely=0.50, relheight=0.22, relwidth=0.24)
        self.Spinbox_drt_lf_ext.configure(activebackground="#f9f9f9")
        self.Spinbox_drt_lf_ext.configure(background="white")
        self.Spinbox_drt_lf_ext.configure(buttonbackground="#d9d9d9")
        self.Spinbox_drt_lf_ext.configure(disabledforeground="#a3a3a3")
        self.Spinbox_drt_lf_ext.configure(font="TkDefaultFont")
        self.Spinbox_drt_lf_ext.configure(foreground="black")
        self.Spinbox_drt_lf_ext.configure(highlightbackground="black")
        self.Spinbox_drt_lf_ext.configure(highlightcolor="black")
        self.Spinbox_drt_lf_ext.configure(increment="0.1")
        self.Spinbox_drt_lf_ext.configure(insertbackground="black")
        self.Spinbox_drt_lf_ext.configure(selectbackground=_slcolor)
        self.Spinbox_drt_lf_ext.configure(selectforeground="white")
        self.Spinbox_drt_lf_ext.configure(textvariable=EISART_support.spinbox_drt_lf_ext)

        self.Label_drt_hf_ext = tk.Label(self.Labelframe_ranges)
        self.Label_drt_hf_ext.place(relx=0.02, rely=0.75, relheight=0.22, relwidth=0.66)
        self.Label_drt_hf_ext.configure(activebackground="#f9f9f9")
        self.Label_drt_hf_ext.configure(activeforeground="black")
        self.Label_drt_hf_ext.configure(background="#d9d9d9")
        self.Label_drt_hf_ext.configure(disabledforeground="#a3a3a3")
        self.Label_drt_hf_ext.configure(foreground="#000000")
        self.Label_drt_hf_ext.configure(highlightbackground="#d9d9d9")
        self.Label_drt_hf_ext.configure(highlightcolor="black")
        self.Label_drt_hf_ext.configure(justify='left')
        self.Label_drt_hf_ext.configure(anchor='e')
        self.Label_drt_hf_ext.configure(text="DRT HF. Ext. Dec.")
        self.Label_drt_hf_ext_tooltip = \
            ToolTip(self.Label_drt_hf_ext, self.tooltip_font, "Decades of the highest frequencies / shortest taus in DRT extended beyond the EIS frequency range")

        self.Spinbox_drt_hf_ext = tk.Spinbox(self.Labelframe_ranges, from_=-3.0, to=3.0)
        self.Spinbox_drt_hf_ext.place(relx=0.72, rely=0.75, relheight=0.22, relwidth=0.24)
        self.Spinbox_drt_hf_ext.configure(activebackground="#f9f9f9")
        self.Spinbox_drt_hf_ext.configure(background="white")
        self.Spinbox_drt_hf_ext.configure(buttonbackground="#d9d9d9")
        self.Spinbox_drt_hf_ext.configure(disabledforeground="#a3a3a3")
        self.Spinbox_drt_hf_ext.configure(font="TkDefaultFont")
        self.Spinbox_drt_hf_ext.configure(foreground="black")
        self.Spinbox_drt_hf_ext.configure(highlightbackground="black")
        self.Spinbox_drt_hf_ext.configure(highlightcolor="black")
        self.Spinbox_drt_hf_ext.configure(increment="0.1")
        self.Spinbox_drt_hf_ext.configure(insertbackground="black")
        self.Spinbox_drt_hf_ext.configure(selectbackground=_slcolor)
        self.Spinbox_drt_hf_ext.configure(selectforeground="white")
        self.Spinbox_drt_hf_ext.configure(textvariable=EISART_support.spinbox_drt_hf_ext)

        self.TNotebook_drt_ecm_settings = ttk.Notebook(self.TNotebook_Browse_settings_t2)
        self.TNotebook_drt_ecm_settings.place(relx=0.0, rely=0.502, relheight=0.5
                , relwidth=1.0)
        self.TNotebook_drt_ecm_settings.configure(takefocus="")
        self.TNotebook_drt_ecm_settings_t1 = tk.Frame(self.TNotebook_drt_ecm_settings)
        self.TNotebook_drt_ecm_settings.add(self.TNotebook_drt_ecm_settings_t1, padding=3)
        self.TNotebook_drt_ecm_settings.tab(0, text="   Plot Settings   "
                ,compound="left", underline="-1", )
        self.TNotebook_drt_ecm_settings_t1.configure(background="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t1.configure(highlightcolor="black")
        self.TNotebook_drt_ecm_settings_t2 = tk.Frame(self.TNotebook_drt_ecm_settings)
        self.TNotebook_drt_ecm_settings.add(self.TNotebook_drt_ecm_settings_t2, padding=3)
        self.TNotebook_drt_ecm_settings.tab(1, text="   ECM Settings   "
                ,compound="left", underline="-1", )
        self.TNotebook_drt_ecm_settings_t2.configure(background="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t2.configure(highlightcolor="black")
        self.TNotebook_drt_ecm_settings_t3 = tk.Frame(self.TNotebook_drt_ecm_settings)
        self.TNotebook_drt_ecm_settings.add(self.TNotebook_drt_ecm_settings_t3, padding=3)
        self.TNotebook_drt_ecm_settings.tab(2, text="   Manual Peak   "
                                            , compound="left", underline="-1", )
        self.TNotebook_drt_ecm_settings_t3.configure(background="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook_drt_ecm_settings_t3.configure(highlightcolor="black")
        EISART_support.drt_ecm_settings_notebook = self.TNotebook_drt_ecm_settings

        self.Checkbutton_eis_line = tk.Checkbutton(self.TNotebook_drt_ecm_settings_t1)
        self.Checkbutton_eis_line.place(relx=0.03, rely=0.05, relheight=0.108
                , relwidth=0.364)
        self.Checkbutton_eis_line.configure(activebackground="#ececec")
        self.Checkbutton_eis_line.configure(activeforeground="#000000")
        self.Checkbutton_eis_line.configure(anchor='w')
        self.Checkbutton_eis_line.configure(background="#d9d9d9")
        self.Checkbutton_eis_line.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_eis_line.configure(foreground="#000000")
        self.Checkbutton_eis_line.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_eis_line.configure(highlightcolor="black")
        self.Checkbutton_eis_line.configure(justify='left')
        self.Checkbutton_eis_line.configure(text="Plot fitted EIS as lines")
        self.Checkbutton_eis_line.configure(variable=EISART_support.che_eis_line)
        self.Checkbutton_eis_line_tooltip = \
            ToolTip(self.Checkbutton_eis_line, self.tooltip_font, "Otherwise plot fitted EIS as isolated markers")

        self.Checkbutton_show_tau = tk.Checkbutton(self.TNotebook_drt_ecm_settings_t1)
        self.Checkbutton_show_tau.place(relx=0.03, rely=0.165, relheight=0.108
                , relwidth=0.57)
        self.Checkbutton_show_tau.configure(activebackground="#ececec")
        self.Checkbutton_show_tau.configure(activeforeground="#000000")
        self.Checkbutton_show_tau.configure(anchor='w')
        self.Checkbutton_show_tau.configure(background="#d9d9d9")
        self.Checkbutton_show_tau.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_show_tau.configure(foreground="#000000")
        self.Checkbutton_show_tau.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_show_tau.configure(highlightcolor="black")
        self.Checkbutton_show_tau.configure(justify='left')
        self.Checkbutton_show_tau.configure(text="Plot DRT to tau instead of frequency")
        self.Checkbutton_show_tau.configure(variable=EISART_support.che_show_tau)
        self.Checkbutton_show_tau.configure(command=EISART_support.command_show_tau)
        self.Checkbutton_show_tau_tooltip = \
            ToolTip(self.Checkbutton_show_tau, self.tooltip_font, "and also update related widgets in the GUI")

        # self.Checkbutton_sel_drtecm = tk.Checkbutton(self.TNotebook_drt_ecm_settings_t1)
        # self.Checkbutton_sel_drtecm.place(relx=0.03, rely=0.32, relheight=0.108
        #                                 , relwidth=0.57)
        # self.Checkbutton_sel_drtecm.configure(activebackground="#ececec")
        # self.Checkbutton_sel_drtecm.configure(activeforeground="#000000")
        # self.Checkbutton_sel_drtecm.configure(anchor='w')
        # self.Checkbutton_sel_drtecm.configure(background="#d9d9d9")
        # self.Checkbutton_sel_drtecm.configure(disabledforeground="#a3a3a3")
        # self.Checkbutton_sel_drtecm.configure(foreground="#000000")
        # self.Checkbutton_sel_drtecm.configure(highlightbackground="#d9d9d9")
        # self.Checkbutton_sel_drtecm.configure(highlightcolor="black")
        # self.Checkbutton_sel_drtecm.configure(justify='left')
        # self.Checkbutton_sel_drtecm.configure(text="Plot smoothed EIS instead of ECM results")
        # self.Checkbutton_sel_drtecm.configure(variable=EISART_support.che_true_drt_false_ecm)

        self.radio_drt_ecm_sel1 = ttk.Radiobutton(
            self.TNotebook_drt_ecm_settings_t1,
            text='Show smoothed EIS',
            variable=EISART_support.che_true_drt_false_ecm,
            value=True)
        self.radio_drt_ecm_sel1.configure(command=self.radio_drt_ecm_sel)
        self.radio_drt_ecm_sel1.place(relx=0.6, rely=0.05, relheight=0.108, relwidth=0.4)
        self.radio_drt_ecm_sel11_tooltip = \
            ToolTip(self.radio_drt_ecm_sel1, self.tooltip_font, "Evaluate EIS from the DRT results. \n"
                                                                "If K-K test enabled, save smoothed EIS; otherwise save DRT")

        self.radio_drt_ecm_sel2 = ttk.Radiobutton(
            self.TNotebook_drt_ecm_settings_t1,
            text='Show ECM results',
            variable=EISART_support.che_true_drt_false_ecm,
            value=False)
        self.radio_drt_ecm_sel2.configure(command=self.radio_drt_ecm_sel)
        self.radio_drt_ecm_sel2.place(relx=0.6, rely=0.165, relheight=0.108, relwidth=0.4)
        self.radio_drt_ecm_sel2_tooltip = \
            ToolTip(self.radio_drt_ecm_sel2, self.tooltip_font, "Fit equivalent circuit model (ECM)")

        self.Labelframe_plot_ranges = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t1, relief='groove',
                                                    foreground="black", text="Plot ranges", background="#d9d9d9",
                                                    highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_plot_ranges.place(relx=0.0, rely=0.28, relheight=0.72, relwidth=1.0)

        self.Label_plot_range_z_re_min = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black", justify='right', anchor='e',
                                                  text="EIS:       Z_real from")
        self.Label_plot_range_z_re_min.place(x=0, y=10, height=20, width=130)

        self.Entry_plot_range_z_re_min = tk.Entry(self.Labelframe_plot_ranges,
                                                  background="white", disabledforeground="#a3a3a3",
                                                  font="TkDefaultFont", foreground="#000000",
                                                  highlightbackground="#d9d9d9", highlightcolor="black",
                                                  insertbackground="black", selectbackground="#5f87c5",
                                                  selectforeground="white",
                                                  textvariable=EISART_support.txt_plot_range_z_re_min)
        self.Entry_plot_range_z_re_min.place(x=130, y=10, height=20, width=55)

        self.Label_plot_range_z_re_to = tk.Label(self.Labelframe_plot_ranges,
                                                 activebackground="#f9f9f9", activeforeground="black",
                                                 background="#d9d9d9", disabledforeground="#a3a3a3",
                                                 foreground="#000000", highlightbackground="#d9d9d9",
                                                 highlightcolor="black",
                                                 text="to")
        self.Label_plot_range_z_re_to.place(x=190, y=10, height=20, width=20)

        self.Entry_plot_range_z_re_max = tk.Entry(self.Labelframe_plot_ranges,
                                                  background="white", disabledforeground="#a3a3a3",
                                                  font="TkDefaultFont", foreground="#000000",
                                                  highlightbackground="#d9d9d9", highlightcolor="black",
                                                  insertbackground="black", selectbackground="#5f87c5",
                                                  selectforeground="white",
                                                  textvariable=EISART_support.txt_plot_range_z_re_max)
        self.Entry_plot_range_z_re_max.place(x=210, y=10, height=20, width=55)

        self.Label_plot_range_z_re_unit = tk.Label(self.Labelframe_plot_ranges,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black", justify='left', anchor='w',
                                                   text="Ohm * cm^2")
        self.Label_plot_range_z_re_unit.place(x=270, y=10, height=20, width=100)

        self.Label_plot_range_z_im_min = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black", justify='right', anchor='e',
                                                  text="Z_imag from")
        self.Label_plot_range_z_im_min.place(x=20, y=30, height=20, width=110)

        self.Entry_plot_range_z_im_min = tk.Entry(self.Labelframe_plot_ranges,
                                                  background="white", disabledforeground="#a3a3a3",
                                                  font="TkDefaultFont", foreground="#000000",
                                                  highlightbackground="#d9d9d9", highlightcolor="black",
                                                  insertbackground="black", selectbackground="#5f87c5",
                                                  selectforeground="white", state="readonly",
                                                  textvariable=EISART_support.txt_plot_range_z_im_min)
        self.Entry_plot_range_z_im_min.place(x=130, y=30, height=20, width=55)

        self.Label_plot_range_z_im_to = tk.Label(self.Labelframe_plot_ranges,
                                                 activebackground="#f9f9f9", activeforeground="black",
                                                 background="#d9d9d9", disabledforeground="#a3a3a3",
                                                 foreground="#000000", highlightbackground="#d9d9d9",
                                                 highlightcolor="black",
                                                 text="to")
        self.Label_plot_range_z_im_to.place(x=190, y=30, height=20, width=20)

        self.Entry_plot_range_z_im_max = tk.Entry(self.Labelframe_plot_ranges,
                                                  background="white", disabledforeground="#a3a3a3",
                                                  font="TkDefaultFont", foreground="#000000",
                                                  highlightbackground="#d9d9d9", highlightcolor="black",
                                                  insertbackground="black", selectbackground="#5f87c5",
                                                  selectforeground="white",
                                                  textvariable=EISART_support.txt_plot_range_z_im_max)
        self.Entry_plot_range_z_im_max.place(x=210, y=30, height=20, width=55)

        self.Label_plot_range_z_im_unit = tk.Label(self.Labelframe_plot_ranges,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black", justify='left', anchor='w',
                                                   text="Ohm * cm^2")
        self.Label_plot_range_z_im_unit.place(x=270, y=30, height=20, width=100)

        self.Label_plot_range_eis_f_min = tk.Label(self.Labelframe_plot_ranges,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black", justify='right', anchor='e',
                                                   text="Frequency from")
        self.Label_plot_range_eis_f_min.place(x=20, y=50, height=20, width=110)

        self.Entry_plot_range_eis_f_min = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_eis_f_min)
        self.Entry_plot_range_eis_f_min.place(x=130, y=50, height=20, width=55)

        self.Label_plot_range_eis_f_to = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black",
                                                  text="to")
        self.Label_plot_range_eis_f_to.place(x=190, y=50, height=20, width=20)

        self.Entry_plot_range_eis_f_max = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_eis_f_max)
        self.Entry_plot_range_eis_f_max.place(x=210, y=50, height=20, width=55)

        self.Label_plot_range_eis_f_unit = tk.Label(self.Labelframe_plot_ranges,
                                                    activebackground="#f9f9f9", activeforeground="black",
                                                    background="#d9d9d9", disabledforeground="#a3a3a3",
                                                    foreground="#000000", highlightbackground="#d9d9d9",
                                                    highlightcolor="black", justify='left', anchor='w',
                                                    text="Hz")
        self.Label_plot_range_eis_f_unit.place(x=270, y=50, height=20, width=100)

        self.Label_plot_range_drt_g_min = tk.Label(self.Labelframe_plot_ranges,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black", justify='right', anchor='e',
                                                   text="DRT:   gamma from")
        self.Label_plot_range_drt_g_min.place(x=0, y=70, height=20, width=130)

        self.Entry_plot_range_drt_g_min = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_drt_g_min)
        self.Entry_plot_range_drt_g_min.place(x=130, y=70, height=20, width=55)

        self.Label_plot_range_drt_g_to = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black",
                                                  text="to")
        self.Label_plot_range_drt_g_to.place(x=190, y=70, height=20, width=20)

        self.Entry_plot_range_drt_g_max = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_drt_g_max)
        self.Entry_plot_range_drt_g_max.place(x=210, y=70, height=20, width=55)

        self.Label_plot_range_drt_g_unit = tk.Label(self.Labelframe_plot_ranges,
                                                    activebackground="#f9f9f9", activeforeground="black",
                                                    background="#d9d9d9", disabledforeground="#a3a3a3",
                                                    foreground="#000000", highlightbackground="#d9d9d9",
                                                    highlightcolor="black", justify='left', anchor='w',
                                                    text="Ohm * cm^2 / log(s)")
        self.Label_plot_range_drt_g_unit.place(x=270, y=70, height=20, width=130)

        self.Label_plot_range_drt_x_min = tk.Label(self.Labelframe_plot_ranges,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black", justify='right', anchor='e',
                                                   text="Eig. Freq. from")
        if EISART_support.che_show_tau.get():
            self.Label_plot_range_drt_x_min.configure(text="tau from")
        self.Label_plot_range_drt_x_min.place(x=20, y=90, height=20, width=110)
        EISART_support.label_plot_range_drt_x_min = self.Label_plot_range_drt_x_min

        self.Entry_plot_range_drt_x_min = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_drt_x_min)
        self.Entry_plot_range_drt_x_min.place(x=130, y=90, height=20, width=55)

        self.Label_plot_range_drt_x_to = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black",
                                                  text="to")
        self.Label_plot_range_drt_x_to.place(x=190, y=90, height=20, width=20)

        self.Entry_plot_range_drt_x_max = tk.Entry(self.Labelframe_plot_ranges,
                                                   background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white",
                                                   textvariable=EISART_support.txt_plot_range_drt_x_max)
        self.Entry_plot_range_drt_x_max.place(x=210, y=90, height=20, width=55)

        self.Label_plot_range_drt_x_unit = tk.Label(self.Labelframe_plot_ranges,
                                                    activebackground="#f9f9f9", activeforeground="black",
                                                    background="#d9d9d9", disabledforeground="#a3a3a3",
                                                    foreground="#000000", highlightbackground="#d9d9d9",
                                                    highlightcolor="black", justify='left', anchor='w',
                                                    text="Hz")
        if EISART_support.che_show_tau.get():
            self.Label_plot_range_drt_x_unit.configure(text="s")
        self.Label_plot_range_drt_x_unit.place(x=270, y=90, height=20, width=120)
        EISART_support.label_plot_range_drt_x_unit = self.Label_plot_range_drt_x_unit

        self.Label_plot_range_res_min = tk.Label(self.Labelframe_plot_ranges,
                                                 activebackground="#f9f9f9", activeforeground="black",
                                                 background="#d9d9d9", disabledforeground="#a3a3a3",
                                                 foreground="#000000", highlightbackground="#d9d9d9",
                                                 highlightcolor="black", justify='right', anchor='e',
                                                 text="Residual from")
        self.Label_plot_range_res_min.place(x=20, y=110, height=20, width=110)

        self.Entry_plot_range_res_min = tk.Entry(self.Labelframe_plot_ranges,
                                                 background="white", disabledforeground="#a3a3a3",
                                                 font="TkDefaultFont", foreground="#000000",
                                                 highlightbackground="#d9d9d9", highlightcolor="black",
                                                 insertbackground="black", selectbackground="#5f87c5",
                                                 selectforeground="white",
                                                 textvariable=EISART_support.txt_plot_range_res_min)
        self.Entry_plot_range_res_min.place(x=130, y=110, height=20, width=55)

        self.Label_plot_range_res_to = tk.Label(self.Labelframe_plot_ranges,
                                                activebackground="#f9f9f9", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#d9d9d9",
                                                highlightcolor="black",
                                                text="to")
        self.Label_plot_range_res_to.place(x=190, y=110, height=20, width=20)

        self.Entry_plot_range_res_max = tk.Entry(self.Labelframe_plot_ranges,
                                                 background="white", disabledforeground="#a3a3a3",
                                                 font="TkDefaultFont", foreground="#000000",
                                                 highlightbackground="#d9d9d9", highlightcolor="black",
                                                 insertbackground="black", selectbackground="#5f87c5",
                                                 selectforeground="white",
                                                 textvariable=EISART_support.txt_plot_range_res_max)
        self.Entry_plot_range_res_max.place(x=210, y=110, height=20, width=55)

        self.Label_plot_range_res_unit = tk.Label(self.Labelframe_plot_ranges,
                                                  activebackground="#f9f9f9", activeforeground="black",
                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                  highlightcolor="black", justify='left', anchor='w',
                                                  text="%")
        self.Label_plot_range_res_unit.place(x=270, y=110, height=20, width=30)

        self.Button_reset_plot_range = tk.Button(self.Labelframe_plot_ranges,
                                                 activebackground="#ececec", activeforeground="black",
                                                 background="#d9d9d9", disabledforeground="#a3a3a3",
                                                 foreground="#000000", highlightbackground="#4d5564",
                                                 highlightcolor="black", justify='left', pady="0",
                                                 text="Reset", command=EISART_support.reset_plot_ranges)
        self.Button_reset_plot_range.place(x=360, y=10, height=20, width=50)
        self.Button_reset_plot_range_tooltip = \
            ToolTip(self.Button_reset_plot_range, self.tooltip_font, "Load the default plot range")

        self.Checkbutton_plot_range_enable = tk.Checkbutton(self.Labelframe_plot_ranges,
                                                            activebackground="#ececec", activeforeground="black",
                                                            background="#d9d9d9", disabledforeground="#a3a3a3",
                                                            foreground="#000000", highlightbackground="#d9d9d9",
                                                            highlightcolor="black", justify='left', anchor='w',
                                                            text="Enable", variable=EISART_support.plot_ranges_enable)
        self.Checkbutton_plot_range_enable.place(x=320, y=110, height=20, width=90)
        self.Checkbutton_plot_range_enable_tooltip = \
            ToolTip(self.Checkbutton_plot_range_enable, self.tooltip_font,
                    "Plot using the specified ranges \n"
                    "Otherwise, plot using automatically determined ranges")

        # self.Label1 = tk.Label(self.TNotebook_drt_ecm_settings_t2)
        # self.Label1.place(relx=0.092, rely=0.043, height=26, width=344)
        # self.Label1.configure(activebackground="#f9f9f9")
        # self.Label1.configure(activeforeground="black")
        # self.Label1.configure(background="#d9d9d9")
        # self.Label1.configure(disabledforeground="#a3a3a3")
        # self.Label1.configure(foreground="#000000")
        # self.Label1.configure(highlightbackground="#d9d9d9")
        # self.Label1.configure(highlightcolor="black")
        # self.Label1.configure(relief="sunken")
        # self.Label1.configure(text="Input EIS data -> DRT analysis ->")
        #
        # self.Label1_1 = tk.Label(self.TNotebook_drt_ecm_settings_t2)
        # self.Label1_1.place(relx=0.092, rely=0.167, height=25, width=344)
        # self.Label1_1.configure(activebackground="#f9f9f9")
        # self.Label1_1.configure(activeforeground="black")
        # self.Label1_1.configure(background="#d9d9d9")
        # self.Label1_1.configure(disabledforeground="#a3a3a3")
        # self.Label1_1.configure(foreground="#000000")
        # self.Label1_1.configure(highlightbackground="#d9d9d9")
        # self.Label1_1.configure(highlightcolor="black")
        # self.Label1_1.configure(relief="sunken")
        # self.Label1_1.configure(text="Cumulative DRT -> Estimate peak parameters ->")

        self.Labelframe_peak_detect = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t2)
        self.Labelframe_peak_detect.place(relx=0.0, rely=0.0, relheight=0.3
                                          , relwidth=0.984)
        self.Labelframe_peak_detect.configure(relief='groove')
        self.Labelframe_peak_detect.configure(foreground="black")
        self.Labelframe_peak_detect.configure(text="DRT peak detection")
        self.Labelframe_peak_detect.configure(background="#d9d9d9")
        self.Labelframe_peak_detect.configure(highlightbackground="#d9d9d9")
        self.Labelframe_peak_detect.configure(highlightcolor="black")

        self.Checkbutton_auto_peak_detect = tk.Checkbutton(self.Labelframe_peak_detect,
                                                           activebackground="#ececec", activeforeground="black",
                                                           background="#d9d9d9", disabledforeground="#a3a3a3",
                                                           foreground="#000000", highlightbackground="#d9d9d9",
                                                           highlightcolor="black", justify='left', anchor='w',
                                                           text="Auto", variable=EISART_support.che_auto_peak_detect)
        self.Checkbutton_auto_peak_detect.place(relx=0.02, rely=0.1, height=26, width=120)
        self.Checkbutton_auto_peak_detect.configure(command=self.che_auto_peak_detect_cmd)
        self.Checkbutton_auto_peak_detect_tooltip = \
            ToolTip(self.Checkbutton_auto_peak_detect, self.tooltip_font, "Automatically detect peaks and determine peak positions")

        self.Label_peak_damp_dec = tk.Label(self.Labelframe_peak_detect)
        self.Label_peak_damp_dec.place(relx=0.2, rely=0.1, height=26
                                       , width=120)
        self.Label_peak_damp_dec.configure(activebackground="#f9f9f9")
        self.Label_peak_damp_dec.configure(activeforeground="black")
        self.Label_peak_damp_dec.configure(background="#d9d9d9")
        self.Label_peak_damp_dec.configure(disabledforeground="#a3a3a3")
        self.Label_peak_damp_dec.configure(foreground="#000000")
        self.Label_peak_damp_dec.configure(highlightbackground="#d9d9d9")
        self.Label_peak_damp_dec.configure(highlightcolor="black")
        self.Label_peak_damp_dec.configure(justify='left')
        self.Label_peak_damp_dec.configure(text="Peak Damping")
        self.Label_peak_damp_dec_tooltip = \
            ToolTip(self.Label_peak_damp_dec, self.tooltip_font,
                    "Peak detection filter damping in tau decades \n"
                    "The stronger the damping, the less likely false peaks are marked and more likely real peaks are dropped")

        self.Spinbox_pk_damp_dec = tk.Spinbox(self.Labelframe_peak_detect, from_=0.0, to=2.0)
        self.Spinbox_pk_damp_dec.place(relx=0.48, rely=0.1, relheight=0.6
                                       , relwidth=0.10)
        self.Spinbox_pk_damp_dec.configure(activebackground="#f9f9f9")
        self.Spinbox_pk_damp_dec.configure(background="white")
        self.Spinbox_pk_damp_dec.configure(buttonbackground="#d9d9d9")
        self.Spinbox_pk_damp_dec.configure(disabledforeground="#a3a3a3")
        self.Spinbox_pk_damp_dec.configure(font="TkDefaultFont")
        self.Spinbox_pk_damp_dec.configure(foreground="black")
        self.Spinbox_pk_damp_dec.configure(highlightbackground="black")
        self.Spinbox_pk_damp_dec.configure(highlightcolor="black")
        self.Spinbox_pk_damp_dec.configure(increment="0.01")
        self.Spinbox_pk_damp_dec.configure(insertbackground="black")
        self.Spinbox_pk_damp_dec.configure(selectbackground=_slcolor)
        self.Spinbox_pk_damp_dec.configure(selectforeground="white")
        self.Spinbox_pk_damp_dec.configure(textvariable=EISART_support.spinbox_pk_damp_dec)

        self.Label_max_num_peak = tk.Label(self.Labelframe_peak_detect)
        self.Label_max_num_peak.place(relx=0.6, rely=0.1, height=26
                                      , width=100)
        self.Label_max_num_peak.configure(activebackground="#f9f9f9")
        self.Label_max_num_peak.configure(activeforeground="black")
        self.Label_max_num_peak.configure(background="#d9d9d9")
        self.Label_max_num_peak.configure(disabledforeground="#a3a3a3")
        self.Label_max_num_peak.configure(foreground="#000000")
        self.Label_max_num_peak.configure(highlightbackground="#d9d9d9")
        self.Label_max_num_peak.configure(highlightcolor="black")
        self.Label_max_num_peak.configure(justify='left')
        self.Label_max_num_peak.configure(text="Max Num. Peak")
        self.Label_max_num_peak_tooltip = \
            ToolTip(self.Label_max_num_peak, self.tooltip_font,
                    "The max number of peaks to be marked \n"
                    "Peaks are filtered by prevalence. Less prevalent peaks may be dropped")

        self.Spinbox_max_num_peak = tk.Spinbox(self.Labelframe_peak_detect, from_=0.0, to=10.0)
        self.Spinbox_max_num_peak.place(relx=0.85, rely=0.1, relheight=0.6
                                        , relwidth=0.1)
        self.Spinbox_max_num_peak.configure(activebackground="#f9f9f9")
        self.Spinbox_max_num_peak.configure(background="white")
        self.Spinbox_max_num_peak.configure(buttonbackground="#d9d9d9")
        self.Spinbox_max_num_peak.configure(disabledforeground="#a3a3a3")
        self.Spinbox_max_num_peak.configure(font="TkDefaultFont")
        self.Spinbox_max_num_peak.configure(foreground="black")
        self.Spinbox_max_num_peak.configure(highlightbackground="black")
        self.Spinbox_max_num_peak.configure(highlightcolor="black")
        self.Spinbox_max_num_peak.configure(insertbackground="black")
        self.Spinbox_max_num_peak.configure(selectbackground=_slcolor)
        self.Spinbox_max_num_peak.configure(selectforeground="white")
        self.Spinbox_max_num_peak.configure(textvariable=EISART_support.spinbox_max_num_pk)

        self.Labelframe_eis_cnls = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t2)
        self.Labelframe_eis_cnls.place(relx=0.0, rely=0.463, relheight=0.5
                , relwidth=0.366)
        self.Labelframe_eis_cnls.configure(relief='groove')
        self.Labelframe_eis_cnls.configure(foreground="black")
        self.Labelframe_eis_cnls.configure(text="CNLS based on EIS")
        self.Labelframe_eis_cnls.configure(background="#d9d9d9")
        self.Labelframe_eis_cnls.configure(highlightbackground="#d9d9d9")
        self.Labelframe_eis_cnls.configure(highlightcolor="black")

        # self.Checkbutton_eis_fit = tk.Checkbutton(self.TNotebook_drt_ecm_settings_t2)
        # self.Checkbutton_eis_fit.place(relx=0.0, rely=0.323, relheight=0.1
        #         , relwidth=0.3, bordermode='ignore')
        # self.Checkbutton_eis_fit.configure(activebackground="#ececec")
        # self.Checkbutton_eis_fit.configure(activeforeground="#000000")
        # self.Checkbutton_eis_fit.configure(anchor='w')
        # self.Checkbutton_eis_fit.configure(background="#d9d9d9")
        # self.Checkbutton_eis_fit.configure(disabledforeground="#a3a3a3")
        # self.Checkbutton_eis_fit.configure(foreground="#000000")
        # self.Checkbutton_eis_fit.configure(highlightbackground="#d9d9d9")
        # self.Checkbutton_eis_fit.configure(highlightcolor="black")
        # self.Checkbutton_eis_fit.configure(justify='left')
        # self.Checkbutton_eis_fit.configure(text="CNLS fit to EIS")
        # self.Checkbutton_eis_fit.configure(variable=EISART_support.che_eis_fit)
        # self.Checkbutton_eis_fit.configure(command=self.che_eis_fit_cmd)

        self.Label_eis_cdrt_fit = tk.Label(self.TNotebook_drt_ecm_settings_t2)
        self.Label_eis_cdrt_fit.place(relx=0.01, rely=0.323, height=25, relwidth=0.15)
        self.Label_eis_cdrt_fit.configure(activebackground="#f9f9f9", activeforeground="black", anchor='w',
                                          background="#d9d9d9", disabledforeground="#a3a3a3",
                                          foreground="#000000", highlightbackground="#d9d9d9",
                                          highlightcolor="black", justify='left', text="Base on")
        self.Label_eis_cdrt_fit_tooltip = \
            ToolTip(self.Label_eis_cdrt_fit, self.tooltip_font, "Fitting error is minimized to ... ")
        self.radio_eis_cdrt_fit = ttk.Radiobutton(
            self.TNotebook_drt_ecm_settings_t2,
            text='EIS',
            variable=EISART_support.che_eis_fit,
            value=True)
        self.radio_eis_cdrt_fit.place(relx=0.12, rely=0.323, height=25, relwidth=0.12)
        self.radio_eis_cdrt_fit.configure(command=self.che_eis_fit_cmd)
        self.radio_eis_cdrt_fit_tooltip1 = \
            ToolTip(self.radio_eis_cdrt_fit, self.tooltip_font,
                    "Fit by minimizing the weighted difference between the input EIS and the EIS of the ECM")

        self.radio_eis_cdrt_fit = ttk.Radiobutton(
            self.TNotebook_drt_ecm_settings_t2,
            text='CDRT',
            variable=EISART_support.che_eis_fit,
            value=False)
        self.radio_eis_cdrt_fit.place(relx=0.22, rely=0.323, height=25, relwidth=0.18)
        self.radio_eis_cdrt_fit.configure(command=self.che_eis_fit_cmd)
        self.radio_eis_cdrt_fit_tooltip2 = \
            ToolTip(self.radio_eis_cdrt_fit, self.tooltip_font,
                    "Fit by minimizing the weighted difference between the cumulative DRT of the input EIS \n"
                    "and the theoretic cumulative DRT of the ECM")

        self.Checkbutton_eis_fit_tau = tk.Checkbutton(self.Labelframe_eis_cnls)
        self.Checkbutton_eis_fit_tau.place(relx=0.063, rely=0.2, relheight=0.25
                                           , relwidth=0.881, bordermode='ignore')
        self.Checkbutton_eis_fit_tau.configure(activebackground="#ececec")
        self.Checkbutton_eis_fit_tau.configure(activeforeground="#000000")
        self.Checkbutton_eis_fit_tau.configure(anchor='w')
        self.Checkbutton_eis_fit_tau.configure(background="#d9d9d9")
        self.Checkbutton_eis_fit_tau.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_eis_fit_tau.configure(foreground="#000000")
        self.Checkbutton_eis_fit_tau.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_eis_fit_tau.configure(highlightcolor="black")
        self.Checkbutton_eis_fit_tau.configure(justify='left')
        self.Checkbutton_eis_fit_tau.configure(text="Fit tau")
        self.Checkbutton_eis_fit_tau.configure(variable=EISART_support.che_eis_fit_tau)
        self.Checkbutton_eis_fit_tau_tooltip = \
            ToolTip(self.Checkbutton_eis_fit_tau, self.tooltip_font,
                    "Otherwise, tau is fixed during the fitting. \n"
                    "The taus are determined from the position of peaks")

        self.Checkbutton_eis_fit_iterate_alpha = tk.Checkbutton(self.Labelframe_eis_cnls)
        self.Checkbutton_eis_fit_iterate_alpha.place(relx=0.063, rely=0.43
                                                     , relheight=0.25, relwidth=0.819, bordermode='ignore')
        self.Checkbutton_eis_fit_iterate_alpha.configure(activebackground="#ececec")
        self.Checkbutton_eis_fit_iterate_alpha.configure(activeforeground="#000000")
        self.Checkbutton_eis_fit_iterate_alpha.configure(anchor='w')
        self.Checkbutton_eis_fit_iterate_alpha.configure(background="#d9d9d9")
        self.Checkbutton_eis_fit_iterate_alpha.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_eis_fit_iterate_alpha.configure(foreground="#000000")
        self.Checkbutton_eis_fit_iterate_alpha.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_eis_fit_iterate_alpha.configure(highlightcolor="black")
        self.Checkbutton_eis_fit_iterate_alpha.configure(justify='left')
        self.Checkbutton_eis_fit_iterate_alpha.configure(text="Iterate alpha")
        self.Checkbutton_eis_fit_iterate_alpha.configure(variable=EISART_support.che_eis_fit_iterate_alpha)
        self.Checkbutton_eis_fit_iterate_alpha_tooltip = \
            ToolTip(self.Checkbutton_eis_fit_iterate_alpha, self.tooltip_font,
                    "Before fitting, an initial guess of alpha (RQ element spreading factor) is required\n"
                    "If ticked, the init. guess is the last result, if analyzing the same file\n"
                    "If unticked, the init. guess is fixed default values")

        self.Checkbutton_eis_fit_elementwise = tk.Checkbutton(self.Labelframe_eis_cnls)
        self.Checkbutton_eis_fit_elementwise.place(relx=0.063, rely=0.66
                                                     , relheight=0.25, relwidth=0.819, bordermode='ignore')
        self.Checkbutton_eis_fit_elementwise.configure(activebackground="#ececec")
        self.Checkbutton_eis_fit_elementwise.configure(activeforeground="#000000")
        self.Checkbutton_eis_fit_elementwise.configure(anchor='w')
        self.Checkbutton_eis_fit_elementwise.configure(background="#d9d9d9")
        self.Checkbutton_eis_fit_elementwise.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_eis_fit_elementwise.configure(foreground="#000000")
        self.Checkbutton_eis_fit_elementwise.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_eis_fit_elementwise.configure(highlightcolor="black")
        self.Checkbutton_eis_fit_elementwise.configure(justify='left')
        self.Checkbutton_eis_fit_elementwise.configure(text="Fit element-wise")
        self.Checkbutton_eis_fit_elementwise.configure(variable=EISART_support.che_eis_fit_elementwise)
        self.Checkbutton_eis_fit_elementwise_tooltip = \
            ToolTip(self.Checkbutton_eis_fit_elementwise, self.tooltip_font,
                    "Fit one RQ element at a time. Otherwise, fit all elements simutaneously")

        self.Labelframe_cdrt_cnls = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t2)
        self.Labelframe_cdrt_cnls.place(relx=0.4, rely=0.463, relheight=0.5
                , relwidth=0.595)
        self.Labelframe_cdrt_cnls.configure(relief='groove')
        self.Labelframe_cdrt_cnls.configure(foreground="black")
        self.Labelframe_cdrt_cnls.configure(text="CNLS based on CDRT")
        self.Labelframe_cdrt_cnls.configure(background="#d9d9d9")
        self.Labelframe_cdrt_cnls.configure(highlightbackground="#d9d9d9")
        self.Labelframe_cdrt_cnls.configure(highlightcolor="black")

        self.Checkbutton_cdrt_coupled = tk.Checkbutton(self.Labelframe_cdrt_cnls)
        self.Checkbutton_cdrt_coupled.place(relx=0.038, rely=0.337
                , relheight=0.169, relwidth=0.604, bordermode='ignore')
        self.Checkbutton_cdrt_coupled.configure(activebackground="#ececec")
        self.Checkbutton_cdrt_coupled.configure(activeforeground="#000000")
        self.Checkbutton_cdrt_coupled.configure(anchor='w')
        self.Checkbutton_cdrt_coupled.configure(background="#d9d9d9")
        self.Checkbutton_cdrt_coupled.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_cdrt_coupled.configure(foreground="#000000")
        self.Checkbutton_cdrt_coupled.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_cdrt_coupled.configure(highlightcolor="black")
        self.Checkbutton_cdrt_coupled.configure(justify='left')
        self.Checkbutton_cdrt_coupled.configure(text="Coupled R-tau-alpha")
        self.Checkbutton_cdrt_coupled.configure(variable=EISART_support.che_cdrt_fit_coupled)
        self.Checkbutton_cdrt_coupled_tooltip = \
            ToolTip(self.Checkbutton_cdrt_coupled, self.tooltip_font,
                    "Fit R, tau and alpha simutaneously")

        self.Checkbutton_cdrt_refresh = tk.Checkbutton(self.Labelframe_cdrt_cnls)
        self.Checkbutton_cdrt_refresh.place(relx=0.038, rely=0.573
                , relheight=0.292, relwidth=0.604, bordermode='ignore')
        self.Checkbutton_cdrt_refresh.configure(activebackground="#ececec")
        self.Checkbutton_cdrt_refresh.configure(activeforeground="#000000")
        self.Checkbutton_cdrt_refresh.configure(anchor='w')
        self.Checkbutton_cdrt_refresh.configure(background="#d9d9d9")
        self.Checkbutton_cdrt_refresh.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_cdrt_refresh.configure(foreground="#000000")
        self.Checkbutton_cdrt_refresh.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_cdrt_refresh.configure(highlightcolor="black")
        self.Checkbutton_cdrt_refresh.configure(justify='left')
        self.Checkbutton_cdrt_refresh.configure(text="Fit from default pars.")
        self.Checkbutton_cdrt_refresh.configure(variable=EISART_support.che_cdrt_fit_refresh)
        self.Checkbutton_cdrt_refresh_tooltip = \
            ToolTip(self.Checkbutton_cdrt_refresh, self.tooltip_font,
                    "Before fitting, an initial guess is required\n"
                    "If ticked, the initial guess is given by fixed default parameters\n"
                    "If unticked, the initial guess is given by the last fit, if analyzing the same file")

        self.Checkbutton_cdrt_fit_r = tk.Checkbutton(self.Labelframe_cdrt_cnls)
        self.Checkbutton_cdrt_fit_r.place(relx=0.615, rely=0.225, relheight=0.169
                , relwidth=0.323, bordermode='ignore')
        self.Checkbutton_cdrt_fit_r.configure(activebackground="#ececec")
        self.Checkbutton_cdrt_fit_r.configure(activeforeground="#000000")
        self.Checkbutton_cdrt_fit_r.configure(anchor='w')
        self.Checkbutton_cdrt_fit_r.configure(background="#d9d9d9")
        self.Checkbutton_cdrt_fit_r.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_cdrt_fit_r.configure(foreground="#000000")
        self.Checkbutton_cdrt_fit_r.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_cdrt_fit_r.configure(highlightcolor="black")
        self.Checkbutton_cdrt_fit_r.configure(justify='left')
        self.Checkbutton_cdrt_fit_r.configure(text="Fit R")
        self.Checkbutton_cdrt_fit_r.configure(variable=EISART_support.che_cdrt_fit_r)
        self.Checkbutton_cdrt_fit_r_tooltip = \
            ToolTip(self.Checkbutton_cdrt_fit_r, self.tooltip_font,
                    "Fit R only, tau and alpha are treated as specified by \'Fit from default pars.\'")

        self.Checkbutton_cdrt_fit_tau = tk.Checkbutton(self.Labelframe_cdrt_cnls)
        self.Checkbutton_cdrt_fit_tau.place(relx=0.615, rely=0.449
                , relheight=0.18, relwidth=0.323, bordermode='ignore')
        self.Checkbutton_cdrt_fit_tau.configure(activebackground="#ececec")
        self.Checkbutton_cdrt_fit_tau.configure(activeforeground="#000000")
        self.Checkbutton_cdrt_fit_tau.configure(anchor='w')
        self.Checkbutton_cdrt_fit_tau.configure(background="#d9d9d9")
        self.Checkbutton_cdrt_fit_tau.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_cdrt_fit_tau.configure(foreground="#000000")
        self.Checkbutton_cdrt_fit_tau.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_cdrt_fit_tau.configure(highlightcolor="black")
        self.Checkbutton_cdrt_fit_tau.configure(justify='left')
        self.Checkbutton_cdrt_fit_tau.configure(text="Fit tau")
        self.Checkbutton_cdrt_fit_tau.configure(variable=EISART_support.che_cdrt_fit_tau)
        self.Checkbutton_cdrt_fit_tau_tooltip = \
            ToolTip(self.Checkbutton_cdrt_fit_tau, self.tooltip_font,
                    "Fit tau only, R and alpha are treated as specified by \'Fit from default pars.\'")

        self.Checkbutton_cdrt_fit_alpha = tk.Checkbutton(self.Labelframe_cdrt_cnls)
        self.Checkbutton_cdrt_fit_alpha.place(relx=0.615, rely=0.685
                , relheight=0.169, relwidth=0.323, bordermode='ignore')
        self.Checkbutton_cdrt_fit_alpha.configure(activebackground="#ececec")
        self.Checkbutton_cdrt_fit_alpha.configure(activeforeground="#000000")
        self.Checkbutton_cdrt_fit_alpha.configure(anchor='w')
        self.Checkbutton_cdrt_fit_alpha.configure(background="#d9d9d9")
        self.Checkbutton_cdrt_fit_alpha.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_cdrt_fit_alpha.configure(foreground="#000000")
        self.Checkbutton_cdrt_fit_alpha.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_cdrt_fit_alpha.configure(highlightcolor="black")
        self.Checkbutton_cdrt_fit_alpha.configure(justify='left')
        self.Checkbutton_cdrt_fit_alpha.configure(text="Fit alpha")
        self.Checkbutton_cdrt_fit_alpha.configure(variable=EISART_support.che_cdrt_fit_alpha)
        self.Checkbutton_cdrt_fit_alpha_tooltip = \
            ToolTip(self.Checkbutton_cdrt_fit_alpha, self.tooltip_font,
                    "Fit alpha only, R and tau are treated as specified by \'Fit from default pars.\'")

        self.Label_gerischer_pos = tk.Label(self.TNotebook_drt_ecm_settings_t2)
        self.Label_gerischer_pos.place(relx=0.4, rely=0.323, height=25
                , width=113)
        self.Label_gerischer_pos.configure(activebackground="#f9f9f9")
        self.Label_gerischer_pos.configure(activeforeground="black")
        self.Label_gerischer_pos.configure(anchor='w')
        self.Label_gerischer_pos.configure(background="#d9d9d9")
        self.Label_gerischer_pos.configure(disabledforeground="#a3a3a3")
        self.Label_gerischer_pos.configure(foreground="#000000")
        self.Label_gerischer_pos.configure(highlightbackground="#d9d9d9")
        self.Label_gerischer_pos.configure(highlightcolor="black")
        self.Label_gerischer_pos.configure(justify='left')
        self.Label_gerischer_pos.configure(text="Gerischer Positions")
        self.Label_gerischer_pos_tooltip = \
            ToolTip(self.Label_gerischer_pos, self.tooltip_font,
                    "List of IDs of RQ elements substituded by Gerischer elements\n"
                    "If no Gerischer, leave the entry blank, any 0 in the entry is ignored\n"
                    "To replace the RQ element with the highest eigen frequency (shortest tau), input \"1\" in the entry\n"
                    "To replace the RQ element with the 1st and 2nd highest eigen frequency (shortest tau), input \"1, 2\" in the entry\n"
                    "To replace the RQ element with the lowest eigen frequency (longest tau), input \"-1\" in the entry\n"
                    "To replace the RQ element with the 1st and 2nd lowest eigen frequency (longest tau), input \"-1, -2\" in the entry\n"
                    "And so on")

        self.Entry_gerischer_pos = tk.Entry(self.TNotebook_drt_ecm_settings_t2)
        self.Entry_gerischer_pos.place(relx=0.675, rely=0.323, height=25
                , relwidth=0.317)
        self.Entry_gerischer_pos.configure(background="white")
        self.Entry_gerischer_pos.configure(disabledforeground="#a3a3a3")
        self.Entry_gerischer_pos.configure(font="TkDefaultFont")
        self.Entry_gerischer_pos.configure(foreground="#000000")
        self.Entry_gerischer_pos.configure(highlightbackground="#d9d9d9")
        self.Entry_gerischer_pos.configure(highlightcolor="black")
        self.Entry_gerischer_pos.configure(insertbackground="black")
        self.Entry_gerischer_pos.configure(selectbackground=_slcolor)
        self.Entry_gerischer_pos.configure(selectforeground="white")
        self.Entry_gerischer_pos.configure(textvariable=EISART_support.txt_var_gerischer_pos)

        self.Labelframe_manual_peak_model = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t3, relief='groove',
                                                          foreground="black", text="Model", background="#d9d9d9",
                                                          highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_manual_peak_model.place(relx=0.0, rely=0.0, relheight=0.45, relwidth=0.2)

        self.Button_load_m_ecm_init = tk.Button(self.Labelframe_manual_peak_model,
                                                activebackground="#ececec", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#4d5564",
                                                highlightcolor="black", justify='left', pady="0",
                                                text="Load", command=EISART_support.command_for_Button_load_ecm_constrains)
        self.Button_load_m_ecm_init.place(relx=0.05, rely=0.02, relheight=0.31, relwidth=0.9)
        self.Button_load_m_ecm_init_tooltip = \
            ToolTip(self.Button_load_m_ecm_init, self.tooltip_font, "Load ECM initial parameters from file...")

        self.Button_save_m_ecm_init = tk.Button(self.Labelframe_manual_peak_model,
                                                activebackground="#ececec", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#4d5564",
                                                highlightcolor="black", justify='left', pady="0",
                                                text="Save", command=EISART_support.command_for_Button_save_ecm_constrains)
        self.Button_save_m_ecm_init.place(relx=0.05, rely=0.33, relheight=0.31, relwidth=0.9)
        self.Button_save_m_ecm_init_tooltip = \
            ToolTip(self.Button_save_m_ecm_init, self.tooltip_font, "Save ECM initial parameters as file...")

        self.Button_auto_m_ecm_init = tk.Button(self.Labelframe_manual_peak_model,
                                                activebackground="#ececec", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#4d5564",
                                                highlightcolor="black", justify='left', pady="0",
                                                text="Auto", command=EISART_support.command_for_Button_auto_ecm_constrains)
        self.Button_auto_m_ecm_init.place(relx=0.05, rely=0.64, relheight=0.31, relwidth=0.9)
        self.Button_auto_m_ecm_init_tooltip = \
            ToolTip(self.Button_auto_m_ecm_init, self.tooltip_font, "Automatically determine ECM constrains")

        self.Labelframe_manual_peak_pars = tk.LabelFrame(self.TNotebook_drt_ecm_settings_t3, relief='groove',
                                                         foreground="black", text="Parameters", background="#d9d9d9",
                                                         highlightbackground="#d9d9d9", highlightcolor="black")
        self.Labelframe_manual_peak_pars.place(relx=0.22, rely=0.0, relheight=0.45, relwidth=0.78)

        self.Label_manual_peak_peak = tk.Label(self.Labelframe_manual_peak_pars,
                                               activebackground="#f9f9f9", activeforeground="black",
                                               background="#d9d9d9", disabledforeground="#a3a3a3",
                                               foreground="#000000", highlightbackground="#d9d9d9",
                                               highlightcolor="black",
                                               text="Peak")
        self.Label_manual_peak_peak.place(relx=0.0, rely=0.01, relheight=0.31, relwidth=0.15)
        self.Label_manual_peak_peak_tooltip = \
            ToolTip(self.Label_manual_peak_peak, self.tooltip_font,
                    "Format: \"Peak ID / total : peak label\"")

        self.Spinbox_manual_peak_id = tk.Spinbox(self.Labelframe_manual_peak_pars, from_=1, to=1)
        self.Spinbox_manual_peak_id.configure(activebackground="#f9f9f9", background="white", buttonbackground="#d9d9d9",
                                              disabledforeground="#a3a3a3", font="TkDefaultFont", foreground="black",
                                              highlightbackground="black", insertbackground="black",
                                              selectbackground=_slcolor, selectforeground="white", state="readonly")
        self.Spinbox_manual_peak_id.place(relx=0.15, rely=0.01, relheight=0.31, relwidth=0.10)
        self.Spinbox_manual_peak_id.configure(command=EISART_support.command_manual_peak_id)
        self.Spinbox_manual_peak_id.configure(textvariable=EISART_support.spinbox_m_ecm_id)
        EISART_support.spinbox_tk_manual_peak_id = self.Spinbox_manual_peak_id

        self.Label_manual_peak_lash = tk.Label(self.Labelframe_manual_peak_pars,
                                               activebackground="#f9f9f9", activeforeground="black",
                                               background="#d9d9d9", disabledforeground="#a3a3a3",
                                               foreground="#000000", highlightbackground="#d9d9d9",
                                               highlightcolor="black",
                                               text=" / ")
        self.Label_manual_peak_lash.place(relx=0.25, rely=0.01, relheight=0.31, relwidth=0.05)

        self.Spinbox_manual_peak_total = tk.Spinbox(self.Labelframe_manual_peak_pars, from_=1, to=20)
        self.Spinbox_manual_peak_total.configure(activebackground="#f9f9f9", background="white",
                                                 buttonbackground="#d9d9d9",
                                                 disabledforeground="#a3a3a3", font="TkDefaultFont", foreground="black",
                                                 highlightbackground="black", insertbackground="black",
                                                 selectbackground=_slcolor, selectforeground="white", state="readonly")
        self.Spinbox_manual_peak_total.place(relx=0.30, rely=0.01, relheight=0.31, relwidth=0.10)
        self.Spinbox_manual_peak_total.configure(command=EISART_support.command_manual_peak_total)
        self.Spinbox_manual_peak_total.configure(textvariable=EISART_support.spinbox_m_ecm_total)
        EISART_support.spinbox_tk_manual_peak_total = self.Spinbox_manual_peak_total

        self.Label_manual_peak_col = tk.Label(self.Labelframe_manual_peak_pars,
                                              activebackground="#f9f9f9", activeforeground="black",
                                              background="#d9d9d9", disabledforeground="#a3a3a3",
                                              foreground="#000000", highlightbackground="#d9d9d9",
                                              highlightcolor="black",
                                              text=" : ")
        self.Label_manual_peak_col.place(relx=0.40, rely=0.01, relheight=0.31, relwidth=0.05)

        self.Entry_manual_peak_label = tk.Entry(self.Labelframe_manual_peak_pars,
                                                background="white", disabledforeground="#a3a3a3",
                                                font="TkDefaultFont", foreground="#000000",
                                                highlightbackground="#d9d9d9", highlightcolor="black",
                                                insertbackground="black", selectbackground="#5f87c5",
                                                selectforeground="white",
                                                textvariable=EISART_support.txt_m_ecm_label)
        self.Entry_manual_peak_label.bind("<FocusOut>", EISART_support.command_manual_peak_pars)
        self.Entry_manual_peak_label.place(relx=0.45, rely=0.01, relheight=0.31, relwidth=0.20)

        self.Checkbutton_manual_peak_isGerischer = tk.Checkbutton(self.Labelframe_manual_peak_pars,
                                                                  activebackground="#ececec", activeforeground="black",
                                                                  background="#d9d9d9", disabledforeground="#a3a3a3",
                                                                  foreground="#000000", highlightbackground="#d9d9d9",
                                                                  highlightcolor="black", justify='left', anchor='w',
                                                                  text="G", variable=EISART_support.che_m_ecm_isG)
        self.Checkbutton_manual_peak_isGerischer.place(relx=0.65, rely=0.01, relheight=0.31, relwidth=0.15)
        self.Checkbutton_manual_peak_isGerischer.configure(command=EISART_support.command_manual_peak_pars_redraw)
        self.Checkbutton_manual_peak_isGerischer_tooltip = \
            ToolTip(self.Checkbutton_manual_peak_isGerischer, self.tooltip_font,
                    "If ticked, this element is a Gerischer; if not, this element is an RQ element")

        self.Checkbutton_manual_peak_isFixed = tk.Checkbutton(self.Labelframe_manual_peak_pars,
                                                              activebackground="#ececec", activeforeground="black",
                                                              background="#d9d9d9", disabledforeground="#a3a3a3",
                                                              foreground="#000000", highlightbackground="#d9d9d9",
                                                              highlightcolor="black", justify='left', anchor='w',
                                                              text="Fix", variable=EISART_support.che_m_ecm_fixed)
        self.Checkbutton_manual_peak_isFixed.place(relx=0.80, rely=0.01, relheight=0.31, relwidth=0.15)
        self.Checkbutton_manual_peak_isFixed.configure(command=EISART_support.command_manual_peak_pars_redraw)
        self.Checkbutton_manual_peak_isFixed_tooltip = \
            ToolTip(self.Checkbutton_manual_peak_isFixed, self.tooltip_font,
                    "If ticked, the tau and alpha of this element is fixed; if not, these parameters can be adjusted during fitting")

        self.Label_manual_peak_min = tk.Label(self.Labelframe_manual_peak_pars,
                                              activebackground="#f9f9f9", activeforeground="black",
                                              background="#d9d9d9", disabledforeground="#a3a3a3",
                                              foreground="#000000", highlightbackground="#d9d9d9",
                                              highlightcolor="black",
                                              text="Freq from")  # according to show_tau
        EISART_support.label_manual_peak_min = self.Label_manual_peak_min
        self.Label_manual_peak_min.place(relx=0.00, rely=0.34, relheight=0.31, relwidth=0.25)
        self.Label_manual_peak_min_tooltip = \
            ToolTip(self.Label_manual_peak_min, self.tooltip_font,
                    "The range of time constant or eigen frequency of this element")

        self.Entry_manual_peak_min = tk.Entry(self.Labelframe_manual_peak_pars,
                                              background="white", disabledforeground="#a3a3a3",
                                              font="TkDefaultFont", foreground="#000000",
                                              highlightbackground="#d9d9d9", highlightcolor="black",
                                              insertbackground="black", selectbackground="#5f87c5",
                                              selectforeground="white",
                                              textvariable=EISART_support.txt_m_ecm_min)
        self.Entry_manual_peak_min.bind("<FocusOut>", EISART_support.command_manual_peak_pars_redraw)
        self.Entry_manual_peak_min.place(relx=0.25, rely=0.34, relheight=0.31, relwidth=0.2)

        self.Label_manual_peak_to = tk.Label(self.Labelframe_manual_peak_pars,
                                             activebackground="#f9f9f9", activeforeground="black",
                                             background="#d9d9d9", disabledforeground="#a3a3a3",
                                             foreground="#000000", highlightbackground="#d9d9d9",
                                             highlightcolor="black",
                                             text=" Hz  to ")  # according to show_tau
        EISART_support.label_manual_peak_to = self.Label_manual_peak_to
        self.Label_manual_peak_to.place(relx=0.45, rely=0.34, relheight=0.31, relwidth=0.15)

        self.Entry_manual_peak_max = tk.Entry(self.Labelframe_manual_peak_pars)
        self.Entry_manual_peak_max.configure(background="white", disabledforeground="#a3a3a3",
                                             font="TkDefaultFont", foreground="#000000",
                                             highlightbackground="#d9d9d9", highlightcolor="black",
                                             insertbackground="black", selectbackground="#5f87c5",
                                             selectforeground="white")
        self.Entry_manual_peak_max.place(relx=0.6, rely=0.34, relheight=0.31, relwidth=0.2)
        self.Entry_manual_peak_max.bind("<FocusOut>", EISART_support.command_manual_peak_pars_redraw)
        self.Entry_manual_peak_max.configure(textvariable=EISART_support.txt_m_ecm_max)

        self.Label_manual_peak_max = tk.Label(self.Labelframe_manual_peak_pars,
                                              activebackground="#f9f9f9", activeforeground="black",
                                              background="#d9d9d9", disabledforeground="#a3a3a3",
                                              foreground="#000000", highlightbackground="#d9d9d9",
                                              highlightcolor="black",
                                              text=" Hz ")  # according to show_tau
        EISART_support.label_manual_peak_max = self.Label_manual_peak_max
        self.Label_manual_peak_max.place(relx=0.80, rely=0.34, relheight=0.31, relwidth=0.20)

        self.Label_manual_peak_alpha_min = tk.Label(self.Labelframe_manual_peak_pars,
                                                    activebackground="#f9f9f9", activeforeground="black",
                                                    background="#d9d9d9", disabledforeground="#a3a3a3",
                                                    foreground="#000000", highlightbackground="#d9d9d9",
                                                    highlightcolor="black",
                                                    text="alpha from ")
        self.Label_manual_peak_alpha_min.place(relx=0.00, rely=0.67, relheight=0.31, relwidth=0.25)
        self.Label_manual_peak_alpha_min_tooltip = \
            ToolTip(self.Label_manual_peak_alpha_min, self.tooltip_font,
                    "The range of alpha")

        self.Entry_manual_peak_alpha_min = tk.Entry(self.Labelframe_manual_peak_pars,
                                                    background="white", disabledforeground="#a3a3a3",
                                                    font="TkDefaultFont", foreground="#000000",
                                                    highlightbackground="#d9d9d9", highlightcolor="black",
                                                    insertbackground="black", selectbackground="#5f87c5",
                                                    selectforeground="white",
                                                    textvariable=EISART_support.txt_m_ecm_alpha_min)
        self.Entry_manual_peak_alpha_min.bind("<FocusOut>", EISART_support.command_manual_peak_pars_redraw)
        self.Entry_manual_peak_alpha_min.place(relx=0.25, rely=0.67, relheight=0.31, relwidth=0.20)

        self.Label_manual_peak_alpha_to = tk.Label(self.Labelframe_manual_peak_pars,
                                                   activebackground="#f9f9f9", activeforeground="black",
                                                   background="#d9d9d9", disabledforeground="#a3a3a3",
                                                   foreground="#000000", highlightbackground="#d9d9d9",
                                                   highlightcolor="black",
                                                   text="      to ")
        self.Label_manual_peak_alpha_to.place(relx=0.45, rely=0.67, relheight=0.31, relwidth=0.15)

        self.Entry_manual_peak_alpha_max = tk.Entry(self.Labelframe_manual_peak_pars)
        self.Entry_manual_peak_alpha_max.configure(background="white", disabledforeground="#a3a3a3",
                                                   font="TkDefaultFont", foreground="#000000",
                                                   highlightbackground="#d9d9d9", highlightcolor="black",
                                                   insertbackground="black", selectbackground="#5f87c5",
                                                   selectforeground="white")
        self.Entry_manual_peak_alpha_max.place(relx=0.6, rely=0.67, relheight=0.31, relwidth=0.2)
        self.Entry_manual_peak_alpha_max.bind("<FocusOut>", EISART_support.command_manual_peak_pars_redraw)
        self.Entry_manual_peak_alpha_max.configure(textvariable=EISART_support.txt_m_ecm_alpha_max)

        self.Button_auto_m_ecm_init = tk.Button(self.Labelframe_manual_peak_pars,
                                                activebackground="#ececec", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#4d5564",
                                                highlightcolor="black", justify='left', pady="0",
                                                text="↑AZ", command=EISART_support.command_for_Button_sort_a_ecm_constrains)
        self.Button_auto_m_ecm_init.place(relx=0.8, rely=0.67, relheight=0.31, relwidth=0.1)
        self.Button_auto_m_ecm_init_tooltip = \
            ToolTip(self.Button_auto_m_ecm_init, self.tooltip_font,
                    "Sort the elements according to tau in ascending order")

        self.Button_auto_m_ecm_init = tk.Button(self.Labelframe_manual_peak_pars,
                                                activebackground="#ececec", activeforeground="black",
                                                background="#d9d9d9", disabledforeground="#a3a3a3",
                                                foreground="#000000", highlightbackground="#4d5564",
                                                highlightcolor="black", justify='left', pady="0",
                                                text="↓ZA", command=EISART_support.command_for_Button_sort_d_ecm_constrains)
        self.Button_auto_m_ecm_init.place(relx=0.9, rely=0.67, relheight=0.31, relwidth=0.1)
        self.Button_auto_m_ecm_init_tooltip = \
            ToolTip(self.Button_auto_m_ecm_init, self.tooltip_font,
                    "Sort the elements according to tau in descending order")

        self.TSeparator_settings = ttk.Separator(self.TNotebook_Browse_settings_t2)
        self.TSeparator_settings.place(relx=0.0, rely=0.009, relwidth=0.959)

        self.Scrolledtext_terminal = ScrolledText(self.TNotebook_Browse_settings_t3)
        self.Scrolledtext_terminal.place(relx=0.023, rely=0.024, relheight=0.955
                , relwidth=0.964)
        self.Scrolledtext_terminal.configure(background="#303030")
        self.Scrolledtext_terminal.configure(font=font10)
        self.Scrolledtext_terminal.configure(foreground="white")
        self.Scrolledtext_terminal.configure(highlightbackground="#606060")
        self.Scrolledtext_terminal.configure(highlightcolor="white")
        self.Scrolledtext_terminal.configure(insertbackground="black")
        self.Scrolledtext_terminal.configure(insertborderwidth="3")
        self.Scrolledtext_terminal.configure(selectbackground="#5f87c5")
        self.Scrolledtext_terminal.configure(selectforeground="white")
        self.Scrolledtext_terminal.configure(wrap="word")
        EISART_support.scrolledtext_terminal = self.Scrolledtext_terminal

        self.Button_Title1 = tk.Button(self.Frame_ctrl)
        self.Button_Title1.place(relx=0.0, rely=0.0, height=90, relwidth=1.0)
        self.Button_Title1.configure(activebackground="#4d5564")
        self.Button_Title1.configure(activeforeground="white")
        self.Button_Title1.configure(activeforeground="#000000")
        self.Button_Title1.configure(background="#4d5564")
        self.Button_Title1.configure(borderwidth="0")
        self.Button_Title1.configure(disabledforeground="#a3a3a3")
        self.Button_Title1.configure(font="-family {Segoe UI} -size 22 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button_Title1.configure(foreground="#ffffff")
        self.Button_Title1.configure(highlightbackground="#d9d9d9")
        self.Button_Title1.configure(highlightcolor="black")
        self.Button_Title1.configure(pady="0")
        self.Button_Title1.configure(relief="flat")
        self.Button_Title1.configure(text="—  E I S A R T  —")
        self.Button_Title1_tooltip = \
        ToolTip(self.Button_Title1, self.tooltip_font, "Electrochemical Impedance Spectrum Analysis & Refining Tool by Hangyue Li")

        self.Frame2 = tk.Frame(self.TPanedwindow1_p2)
        self.Frame2.place(relx=0.0, rely=0.0, relheight=0.992, relwidth=1.0
                , bordermode='ignore')
        self.Frame2.configure(relief='flat')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        # Start of embedding matplotlib in tkinter
        # Reference:
        # https://matplotlib.org/3.3.1/gallery/user_interfaces/embedding_in_tk_sgskip.html
        self.Frame_plot = tk.Frame(self.Frame2)
        self.Frame_plot.place(relx=0.0, rely=0.15, relheight=0.75, relwidth=1.0, bordermode='ignore')
        self.Frame_plot.configure(relief='flat')
        self.Frame_plot.configure(borderwidth="2")
        self.Frame_plot.configure(background="#d9d9d9")
        self.Frame_plot.configure(highlightbackground="#d9d9d9")
        self.Frame_plot.configure(highlightcolor="black")
        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
        from matplotlib.figure import Figure
        fig_gui = Figure()
        # reference: https://moonbooks.org/Articles/How-to-change-the-color-background-of-a-matplotlib-figure-/
        fig_gui.patch.set_facecolor('#6b768f')
        EISART_support.fig_gui = fig_gui
        self.Canvas1 = FigureCanvasTkAgg(fig_gui, master=self.Frame_plot)
        self.Canvas1.draw()
        # creating the Matplotlib toolbar
        toolbar = NavigationToolbar2Tk(self.Canvas1, self.Frame_plot)
        toolbar.update()
        # placing the toolbar on the Tkinter window
        toolbar.pack(side=tk.BOTTOM, fill=tk.X)
        # placing the canvas on the Tkinter window
        self.Canvas1.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        EISART_support.canvas_gui = self.Canvas1

        # the frame in the Manual ECM tab in the Settings tab
        self.Frame_plot_m_ecm = tk.Frame(self.TNotebook_drt_ecm_settings_t3)
        self.Frame_plot_m_ecm.place(relx=0.0, rely=0.46, relheight=0.54, relwidth=1.0, bordermode='ignore')
        self.Frame_plot_m_ecm.configure(relief='flat')
        self.Frame_plot_m_ecm.configure(borderwidth="2")
        self.Frame_plot_m_ecm.configure(background="#d9d9d9")
        self.Frame_plot_m_ecm.configure(highlightbackground="#d9d9d9")
        self.Frame_plot_m_ecm.configure(highlightcolor="black")

        fig_m_peak = Figure()
        # reference: https://moonbooks.org/Articles/How-to-change-the-color-background-of-a-matplotlib-figure-/
        fig_m_peak.patch.set_facecolor('#d9d9d9')
        EISART_support.fig_m_peak = fig_m_peak
        self.Canvas2 = FigureCanvasTkAgg(fig_m_peak, master=self.Frame_plot_m_ecm)
        self.Canvas2.draw()
        # # creating the Matplotlib toolbar
        # toolbar = NavigationToolbar2Tk(self.Canvas2, self.Frame_plot)
        # toolbar.update()
        # # placing the toolbar on the Tkinter window
        # toolbar.pack(side=tk.BOTTOM, fill=tk.X)
        # placing the canvas on the Tkinter window
        self.Canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        EISART_support.canvas_m_peak = self.Canvas2
        # End of embedding matplotlib in tkinter

        self.Frame1 = tk.Frame(self.Frame2)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=0.151, relwidth=1.0)
        self.Frame1.configure(relief='flat')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Button_Title1_3 = tk.Button(self.Frame1)
        self.Button_Title1_3.place(relx=0.5, rely=0.0, height=90, width=375)
        self.Button_Title1_3.configure(activebackground="#d9d9d9")
        self.Button_Title1_3.configure(activeforeground="#000000")
        self.Button_Title1_3.configure(background="#d9d9d9")
        self.Button_Title1_3.configure(borderwidth="0")
        self.Button_Title1_3.configure(disabledforeground="#a3a3a3")
        self.Button_Title1_3.configure(font="-family {Segoe UI} -size 22 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button_Title1_3.configure(foreground="#ffffff")
        self.Button_Title1_3.configure(highlightbackground="#d9d9d9")
        self.Button_Title1_3.configure(highlightcolor="black")
        self.Button_Title1_3.configure(pady="0")
        self.Button_Title1_3.configure(relief="flat")
        self.Button_Title1_3.configure(text="—  E I S A R T  —")
        self.Button_Title1_3_tooltip = \
        ToolTip(self.Button_Title1_3, self.tooltip_font, "Electrochemical Impedance Spectrum Analysis & Refining Tool by Hangyue Li")

        self.Labelframe_act_area = tk.LabelFrame(self.Frame1)
        self.Labelframe_act_area.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=0.5)
        self.Labelframe_act_area.configure(relief='groove')
        self.Labelframe_act_area.configure(font=font9)
        self.Labelframe_act_area.configure(foreground="black")
        self.Labelframe_act_area.configure(labelanchor="n")
        self.Labelframe_act_area.configure(text="Active cell area")
        self.Labelframe_act_area.configure(background="#d9d9d9")

        self.Label_act_area_explain = tk.Label(self.Labelframe_act_area)
        self.Label_act_area_explain.place(relx=0.032, rely=0.667, height=25
                , width=354, bordermode='ignore')
        self.Label_act_area_explain.configure(activebackground="#f9f9f9")
        self.Label_act_area_explain.configure(activeforeground="black")
        self.Label_act_area_explain.configure(background="#d9d9d9")
        self.Label_act_area_explain.configure(disabledforeground="#a3a3a3")
        self.Label_act_area_explain.configure(foreground="#000000")
        self.Label_act_area_explain.configure(highlightbackground="#d9d9d9")
        self.Label_act_area_explain.configure(highlightcolor="black")
        self.Label_act_area_explain.configure(text="Active electrode or electrolyte area, whichever is smaller")

        self.Entry_act_area = tk.Entry(self.Labelframe_act_area)
        self.Entry_act_area.place(relx=0.347, rely=0.333, height=25
                , relwidth=0.296, bordermode='ignore')
        self.Entry_act_area.configure(background="white")
        self.Entry_act_area.configure(disabledforeground="#a3a3a3")
        self.Entry_act_area.configure(font="TkDefaultFont")
        self.Entry_act_area.configure(foreground="#000000")
        self.Entry_act_area.configure(highlightbackground="#d9d9d9")
        self.Entry_act_area.configure(highlightcolor="black")
        self.Entry_act_area.configure(insertbackground="black")
        self.Entry_act_area.configure(selectbackground=_slcolor)
        self.Entry_act_area.configure(selectforeground="white")
        self.Entry_act_area.configure(textvariable=EISART_support.txt_var_area)
        self.Entry_act_area.bind("<Return>", EISART_support.command_for_Button_RefreshPlot)

        self.Label_act_area = tk.Label(self.Labelframe_act_area)
        self.Label_act_area.place(relx=0.667, rely=0.333, height=25, width=53
                , bordermode='ignore')
        self.Label_act_area.configure(activebackground="#f9f9f9")
        self.Label_act_area.configure(activeforeground="black")
        self.Label_act_area.configure(anchor='w')
        self.Label_act_area.configure(background="#d9d9d9")
        self.Label_act_area.configure(disabledforeground="#a3a3a3")
        self.Label_act_area.configure(foreground="#000000")
        self.Label_act_area.configure(highlightbackground="#d9d9d9")
        self.Label_act_area.configure(highlightcolor="black")
        self.Label_act_area.configure(justify='left')
        self.Label_act_area.configure(text="cm^2")

        self.TProgressbar1 = ttk.Progressbar(self.Frame2, variable=EISART_support.progress_bar_var)
        self.TProgressbar1.place(relx=0.0, rely=0.909, relwidth=1.0
                , relheight=0.0, height=22)
        self.TProgressbar1.configure(length="782")
        self.TProgressbar1.config(mode='determinate', maximum=100, value=0)

        self.Message_state = tk.Message(self.Frame2)
        self.Message_state.place(relx=0.0, rely=0.941, relheight=0.055
                , relwidth=0.995)
        self.Message_state.configure(background="#d9d9d9")
        self.Message_state.configure(foreground="#000000")
        self.Message_state.configure(highlightbackground="#d9d9d9")
        self.Message_state.configure(highlightcolor="black")
        self.Message_state.configure(text="Ready.")
        self.Message_state.configure(width=777)
        EISART_support.message_bar = self.Message_state

    def che_auto_lmd_cmd(self, event=None):
        if EISART_support.che_auto_lmd.get():
            # self.Entry_lmd.configure(state='normal')
            self.Spinbox_auto_lmd_rad.configure(state='normal')
        else:
            # self.Entry_lmd.configure(state='disabled')
            self.Spinbox_auto_lmd_rad.configure(state='disabled')
        root.update_idletasks()

    def che_eis_fit_cmd(self, event=None):
        if EISART_support.che_eis_fit.get():
            self.Checkbutton_cdrt_coupled.configure(state='disabled')
            self.Checkbutton_cdrt_fit_r.configure(state='disabled')
            self.Checkbutton_cdrt_fit_tau.configure(state='disabled')
            self.Checkbutton_cdrt_fit_alpha.configure(state='disabled')
            self.Checkbutton_cdrt_refresh.configure(state='disabled')
            self.Checkbutton_eis_fit_elementwise.configure(state='normal')
            self.Checkbutton_eis_fit_iterate_alpha.configure(state='normal')
            self.Checkbutton_eis_fit_tau.configure(state='normal')
        else:
            self.Checkbutton_cdrt_coupled.configure(state='normal')
            self.Checkbutton_cdrt_fit_r.configure(state='normal')
            self.Checkbutton_cdrt_fit_tau.configure(state='normal')
            self.Checkbutton_cdrt_fit_alpha.configure(state='normal')
            self.Checkbutton_cdrt_refresh.configure(state='normal')
            self.Checkbutton_eis_fit_elementwise.configure(state='disabled')
            self.Checkbutton_eis_fit_iterate_alpha.configure(state='disabled')
            self.Checkbutton_eis_fit_tau.configure(state='disabled')
        root.update_idletasks()

    def che_auto_peak_detect_cmd(self, event=None):
        if EISART_support.che_auto_peak_detect.get():
            self.Spinbox_pk_damp_dec.configure(state='normal')
            self.Spinbox_max_num_peak.configure(state='normal')
            self.TNotebook_drt_ecm_settings.tab(2, state='disabled')
        else:
            self.Spinbox_pk_damp_dec.configure(state='disabled')
            self.Spinbox_max_num_peak.configure(state='disabled')
            self.TNotebook_drt_ecm_settings.tab(2, state='normal')
        EISART_support.get_settings_from_gui()
        from EISART_kernel import settings, settings_file
        settings.save(settings_file)
        root.update_idletasks()

    def radio_drt_ecm_sel(self):
        if EISART_support.che_true_drt_false_ecm.get():  # show DRT
            self.TNotebook_drt_ecm_settings.tab(1, state='disabled')
            self.TNotebook_drt_ecm_settings.tab(2, state='disabled')
        else:
            self.TNotebook_drt_ecm_settings.tab(1, state='normal')
            if not EISART_support.che_auto_peak_detect.get():
                self.TNotebook_drt_ecm_settings.tab(2, state='normal')
        EISART_support.get_settings_from_gui()
        from EISART_kernel import settings, settings_file
        settings.save(settings_file)

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [445, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    "Configure the scrollbars for a widget."
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        "Hide and show scrollbar as needed."
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    # Creates a ttk Frame with a given master, and use this new frame to place the scrollbars and the widget.
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    # A standard Tkinter Text widget with scrollbars that will automatically show/hide as needed.
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    # A standard ttk Treeview widget with scrollbars that will automatically show/hide as needed.
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()
